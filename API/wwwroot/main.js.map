{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;AAAwF;AAG5D;;;AAKrB,MAAM,gBAAgB;IAI3B,YAAoB,gBAAkC,EAAU,WAA6B,EACnF,cAA8B;QADpB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,gBAAW,GAAX,WAAW,CAAkB;QACnF,mBAAc,GAAd,cAAc,CAAgB;QAJ/B,eAAU,GAAa,EAAE,CAAC;QACnC,SAAI,GAAS,EAAU,CAAC;QAIpB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,0CAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACvD,IAAI,EAAE,IAAI,CAAC,EAAE;gBACX,IAAG,IAAI;oBAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAC5B,CAAC;SACF,CAAC;IACH,CAAC;IAEJ,QAAQ;QACN,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;YAC1D,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5D;aAAM;YACL,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;SAC/B;IACH,CAAC;;gFAnBU,gBAAgB;8GAAhB,gBAAgB;;;;;;;;;;;;;;;;;;;ACPiD;;;;;;ICW5E,yEAAmE;IAAA,uDAAqB;IAAA,4DAAM;;;IAA3B,0DAAqB;IAArB,kGAAqB;;ADHnF,MAAM,kBAAkB;IAM7B,oIAAoI;IACpI,YAA4B,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QANvC,UAAK,GAAG,EAAE,CAAC;QAOlB,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG;YACd,cAAc,EAAE,WAAW;YAC3B,eAAe,EAAE,cAAc;SAChC;IACH,CAAC;IAED,UAAU,CAAC,GAAQ;IACnB,CAAC;IACD,gBAAgB,CAAC,EAAO;IACxB,CAAC;IACD,iBAAiB,CAAC,EAAO;IACzB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,SAAS,CAAC,OAAsB;IAC9C,CAAC;;oFAxBU,kBAAkB;gHAAlB,kBAAkB;QCT/B,yEAAyB;QACvB,sEASC;QAED,8GAA8F;QAChG,4DAAM;;QAVF,0DAAuD;QAAvD,mHAAuD;QAGvD,6FAAuB;QADvB,oFAAuB;QAOnB,0DAAkC;QAAlC,oIAAkC;;;;;;;;;;;;;;;;;;;;ACXoC;;;;;;ICW5E,yEAAmE;IAAA,uDAAqB;IAAA,4DAAM;;;IAA3B,0DAAqB;IAArB,kGAAqB;;ADHnF,MAAM,mBAAmB;IAM9B,oIAAoI;IACpI,YAA4B,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QANvC,UAAK,GAAG,EAAE,CAAC;QAOlB,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG;YACd,cAAc,EAAE,WAAW;YAC3B,eAAe,EAAE,YAAY;SAC9B;IACH,CAAC;IAED,UAAU,CAAC,GAAQ;IACnB,CAAC;IACD,gBAAgB,CAAC,EAAO;IACxB,CAAC;IACD,iBAAiB,CAAC,EAAO;IACzB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,SAAS,CAAC,OAAsB;IAC9C,CAAC;;sFAxBU,mBAAmB;iHAAnB,mBAAmB;QCThC,yEAAkB;QAChB,sEASC;QAED,+GAA8F;QAChG,4DAAM;;QAVF,0DAAuD;QAAvD,mHAAuD;QAGvD,6FAAuB;QADvB,oFAAuB;QAOnB,0DAAkC;QAAlC,oIAAkC;;;;;;;;;;;;;;;;;;;ACXuB;;;;;ICQ/D,yEAAyE;IAAA,uDAAwB;IAAA,4DAAM;;;IAA9B,0DAAwB;IAAxB,qGAAwB;;;IACjG,yEAA0E;IAAA,uDAAmF;IAAA,4DAAM;;;IAAzF,0DAAmF;IAAnF,yKAAmF;;;IAC7J,yEAAyE;IAAA,uDAAkF;IAAA,4DAAM;;;IAAxF,0DAAkF;IAAlF,wKAAkF;;;IAC3J,yEAA2E;IAAA,iFAAsB;IAAA,4DAAM;;ADHzG,4FAA4F;AACrF,MAAM,kBAAkB;IAK7B,yHAAyH;IACzH,YAA2B,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QAHtC,SAAI,GAAG,MAAM,CAAC;QAIrB,4EAA4E;QAC5E,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;IACtC,CAAC;IAED,+DAA+D;IAC/D,UAAU,CAAC,GAAQ;IACnB,CAAC;IACD,gBAAgB,CAAC,EAAO;IACxB,CAAC;IACD,iBAAiB,CAAC,EAAO;IACzB,CAAC;;oFAjBU,kBAAkB;gHAAlB,kBAAkB;QCV/B,yEAAkB;QAEhB,sEAKwB;QAExB,8GAAuG;QACvG,8GAAmK;QACnK,8GAAiK;QACjK,8GAAuG;QACzG,4DAAM;;QAVF,0DAA2D;QAA3D,uHAA2D;QAC3D,qFAAa;QAGb,6FAAqB;QADrB,8FAAiC;QAG7B,0DAAwC;QAAxC,qJAAwC;QACxC,0DAAyC;QAAzC,sJAAyC;QACzC,0DAAwC;QAAxC,qJAAwC;QACxC,0DAA0C;QAA1C,uJAA0C;;;;;;;;;;;;;;;;;;;;ACTX;;;;AAMhC,MAAM,UAAU;IACrB,YAAoB,cAA8B,EAAU,MAAqB;QAA7D,mBAAc,GAAd,cAAc,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IACrF,WAAW;QACT,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAC1C,yCAAG,CAAC,IAAI,CAAC,EAAE;YACT,IAAI,CAAC,IAAI;gBAAE,OAAO,KAAK,CAAC;YACxB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;gBACrE,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBAChD,OAAO,KAAK,CAAC;aACd;QACH,CAAC,CAAC,CACH;IACH,CAAC;;oEAdU,UAAU;2GAAV,UAAU,WAAV,UAAU,mBAFT,MAAM;;;;;;;;;;;;;;;;;;;ACHiB;;;;AAMrC,yHAAyH;AAClH,MAAM,SAAS;IACpB,gDAAgD;IAChD,YAAoB,cAA8B,EAAU,MAAqB;QAA7D,mBAAc,GAAd,cAAc,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IACrF,WAAW;QACT,4DAA4D;QAC5D,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAC1C,mDAAG,CAAC,IAAI,CAAC,EAAE;YACT,IAAI,IAAI;gBAAE,OAAO,IAAI,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QAC3C,CAAC,CAAC,CACH;IACH,CAAC;;kEAXU,SAAS;0GAAT,SAAS,WAAT,SAAS,mBAHR,MAAM;;;;;;;;;;;;;;;;;;ACJkB;;;AAK/B,MAAM,0BAA0B;IACrC,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAEtD,aAAa,CAAE,SAA8B;QAC3C,IAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE;YAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;SACrC;QACD,OAAO,wCAAE,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;;oGARU,0BAA0B;2HAA1B,0BAA0B,WAA1B,0BAA0B,mBAFzB,MAAM;;;;;;;;;;;;;;;;;;;;ACDU;AACgB;AAGF;;;;AAE5C,uGAAuG;AACvG,kEAAkE;AAElE,oBAAoB;AAEb,MAAM,gBAAgB;IAC3B,6DAA6D;IAE7D,YAAoB,MAAc,EAAU,MAAqB;QAA7C,WAAM,GAAN,MAAM,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IAErE,uDAAuD;IACvD,SAAS,CAAC,OAA6B,EAAE,IAAiB;QACxD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,0DAAU,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,KAAK,EAAE;gBACT,QAAQ,KAAK,CAAC,MAAM,EAAE;oBACpB,KAAK,GAAG;wBACN,wFAAwF;wBACxF,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE;4BACtB,6DAA6D;4BAC7D,MAAM,gBAAgB,GAAG,EAAE,CAAC;4BAE5B,+GAA+G;4BAC/G,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE;gCACpC,IAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;oCAC1B,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iCAC/C;6BACF;4BACD,MAAM,gBAAgB,CAAC,IAAI,EAAE,CAAC;yBAC/B;6BAAM;4BACL,qCAAqC;4BACrC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;yBACnD;wBACD,MAAM;oBACR,KAAK,GAAG;wBACN,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;wBAClD,MAAM;oBACR,KAAK,GAAG;wBACN,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;wBACxC,MAAM;oBACR,KAAK,GAAG;wBACN,qDAAqD;wBACrD,MAAM,gBAAgB,GAAqB,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAC,EAAC;wBACxE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;wBAC7D,MAAM;oBACR;wBACE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;wBACpD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBACnB,MAAM;iBACT;aACF;YACD,2FAA2F;YAC3F,OAAO,gDAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CAAC,CACH;IACH,CAAC;;gFAlDU,gBAAgB;iHAAhB,gBAAgB,WAAhB,gBAAgB;;;;;;;;;;;;;;;;;;ACXC;AAIQ;;;AAEtC,qHAAqH;AAG9G,MAAM,cAAc;IAEzB,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAEtD,SAAS,CAAC,OAA6B,EAAE,IAAiB;QACxD,IAAI,WAAiB,CAAC;QAEtB,0JAA0J;QAC1J,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,oDAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;QAErF,qEAAqE;QACrE,IAAI,WAAW,EAAE;YACf,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;gBACtB,iDAAiD;gBACjD,UAAU,EAAE;oBACV,8HAA8H;oBAC9H,aAAa,EAAE,UAAU,WAAW,CAAC,KAAK,EAAE;iBAC7C;aACF,CAAC;SACH;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;;4EAtBU,cAAc;+GAAd,cAAc,WAAd,cAAc;;;;;;;;;;;;;;;;;;;;;ACTG;AACc;AAEK;AACU;;;AAGpD,MAAM,kBAAkB;IAE7B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAEhD,SAAS,CAAC,OAA6B,EAAE,IAAiB;QACxD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAE,uCAAuC;QACjE,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAI,4EAA4E;QAE9G,2FAA2F;QAC3F,CAAC,gFAAsB,CAAC,CAAC,CAAC,0CAAQ,CAAC,CAAC,CAAC,qDAAK,CAAC,IAAI,CAAC,CAAC,EAAE,8DAA8D;QACjH,wDAAQ,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,2BAA2B;QACtD,CAAC,CAAC,CACH;IACH,CAAC;;oFAdU,kBAAkB;mHAAlB,kBAAkB,WAAlB,kBAAkB;;;;;;;;;;;;;;;ACN/B,4DAA4D;AACrD,MAAM,eAAe;CAG3B;;;;;;;;;;;;;;;ACTM,MAAM,UAAU;IASrB,YAAY,IAAU;QANtB,WAAM,GAAG,EAAE,CAAC;QACZ,WAAM,GAAG,EAAE,CAAC;QACZ,eAAU,GAAG,CAAC,CAAC;QACf,aAAQ,GAAG,CAAC,CAAC;QACb,YAAO,GAAG,YAAY,CAAC;QAGrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ;IAC5D,CAAC;CAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACd8C;AACW;AAChB;AACM;AACO;AACJ;AACW;AACF;AACN;AACV;AACM;AACH;;;;;;;;;;;AAE/C,uGAAuG;AACvG,wDAAwD;AAoCjD,MAAM,YAAY;;wEAAZ,YAAY;yGAAZ,YAAY;6GAhCrB,yDAAY;QACZ,4EAAwB,EAAE;QAC1B,4DAAoB,CAAC;YACnB,aAAa,EAAE,oBAAoB;SACpC,CAAC;QACF,kEAAkB,EAAE;QACpB,iEAAgB;QAChB,iEAAwB,CAAC;YACvB,IAAI,EAAE,kBAAkB;SACzB,CAAC;QACF,6DAAgB;QAChB,gFAA0B,EAAE;QAC5B,8EAAwB,EAAE;QAC1B,yEAAqB,EAAE;QACvB,+DAAqB,EAAE;QACvB,qEAAmB,EAAE,EAIrB,oEAAgB;QAChB,oDAAY;QACZ,0DAAU;QACV,iEAAgB;QAChB,yDAAgB;QAChB,6DAAgB;QAChB,wEAAkB;QAClB,sEAAgB;QAChB,iEAAa;QACb,uDAAa;QACb,6DAAW;mIAGF,YAAY,cAhCrB,yDAAY,0LAMZ,iEAAgB,6DAIhB,6DAAgB,0VAShB,oEAAgB;QAChB,oDAAY;QACZ,0DAAU;QACV,iEAAgB;QAChB,yDAAgB;QAChB,6DAAgB;QAChB,wEAAkB;QAClB,sEAAgB;QAChB,iEAAa;QACb,uDAAa;QACb,6DAAW;;;;;;;;;;;;;;;;;AC3CU;AACa;;;AAO/B,MAAM,sBAAsB;IACjC,YAAoB,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IAAG,CAAC;IAErD,OAAO,CAAC,KAA6B;QACnC,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC,CAAC;IACvE,CAAC;;4FALU,sBAAsB;uHAAtB,sBAAsB,WAAtB,sBAAsB,mBAFrB,MAAM;;;;;;;;;;;;;;;;;;;;;ACTiB;AACA;AACsB;;;;AAI3D,2GAA2G;AAI3G,mDAAmD;AAC5C,MAAM,cAAc;IAKzB;;iGAE6F;IAE3F,wHAAwH;IACxH,cAAc;IAChB,YAAoB,IAAgB,EAAU,eAAgC;QAA1D,SAAI,GAAJ,IAAI,CAAY;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAV9E,YAAO,GAAG,4EAAkB,CAAC;QACrB,sBAAiB,GAAG,IAAI,+CAAa,CAAO,CAAC,CAAC,CAAC,CAAC,yEAAyE;QACjI,iBAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC,CAAC,oDAAoD;IAQxB,CAAC;IAEnF,kFAAkF;IAClF,oCAAoC;IACpC,KAAK,CAAC,KAAW;QACf,yGAAyG;QACzG,6CAA6C;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,eAAe,EAAE,KAAK,CAAC,CAAC,IAAI;QAC/D,qHAAqH;QACrH,mDAAG,CAAC,CAAC,QAAa,EAAE,EAAE;YACpB,MAAM,IAAI,GAAG,QAAQ,CAAC;YACtB,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CACH;IACH,CAAC;IAED,QAAQ,CAAC,KAAU;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,EAAE,KAAK,CAAC,CAAC,IAAI,CAClE,mDAAG,CAAC,CAAC,IAAU,EAAE,EAAE;YACjB,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CACH;IACH,CAAC;IAGD,mBAAmB;IACnB,cAAc,CAAC,IAAU;QACvB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;QACpD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnE,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,0DAA0D;QAE7F,qCAAqC;QACrC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,MAAM;QACJ,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;IAC3C,CAAC;IAED,eAAe,CAAC,KAAa;QAC3B,4IAA4I;QAC5I,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC;;4EA7DU,cAAc;+GAAd,cAAc,WAAd,cAAc,mBAHb,MAAM;;;;;;;;;;;;;;;;;;ACTuC;;;AAOpD,MAAM,YAAY;IAGvB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,YAAO,GAAG,4EAAkB,CAAC;IAEW,CAAC;IAEzC,iBAAiB;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,IAAI,CAAC,OAAO,GAAG,wBAAwB,CAAC,CAAC;IACxE,CAAC;IAED,eAAe,CAAC,QAAgB,EAAE,KAAe;QAC/C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAW,IAAI,CAAC,OAAO,GAAG,mBAAmB,GAAG,QAAQ,GAAG,SAAS,GAAG,KAAK,EAAE,EAAE,CAAC,CAAC;IACzG,CAAC;;wEAXU,YAAY;6GAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;;;;;;;;;;;;;;;;;;;ACAb,MAAM,WAAW;IAItB,YAAoB,cAAiC;QAAjC,mBAAc,GAAd,cAAc,CAAmB;QAHrD,+EAA+E;QAC/E,qBAAgB,GAAG,CAAC,CAAC;IAEoC,CAAC;IAE1D,IAAI;QACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE;YAClC,IAAI,EAAE,kBAAkB;YACxB,OAAO,EAAE,wBAAwB;YACjC,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;IACL,CAAC;IAED,IAAI;QACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;SAC5B;IACH,CAAC;;sEArBU,WAAW;4GAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;;;;;;;;;;;;;;;;;;;ACFuE;AACpD;;;AAEvC,sGAAsG;AAK/F,MAAM,cAAc;IAGzB,YAAoB,YAA4B;QAA5B,iBAAY,GAAZ,YAAY,CAAgB;IAAI,CAAC;IAErD,OAAO,CACL,KAAK,GAAG,cAAc,EACtB,OAAO,GAAG,mCAAmC,EAC7C,SAAS,GAAG,IAAI,EAChB,aAAa,GAAG,QAAQ;QAExB,MAAM,MAAM,GAAG;YACb,YAAY,EAAE;gBACZ,KAAK;gBACL,OAAO;gBACP,SAAS;gBACT,aAAa;aACd;SACF;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,mGAAsB,EAAE,MAAM,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CACnC,yCAAG,CAAC,GAAG,EAAE;YACP,OAAO,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,MAAM;QACzC,CAAC,CAAC,CACH;IACH,CAAC;;4EAzBU,cAAc;+GAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;;;;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEH;AAEjC;AACiB;AACQ;AAG2B;;;;AAE9E;;;;;;IAMI;AAKG,MAAM,cAAc;IAWzB,iGAAiG;IACjG,iEAAiE;IACjE,kGAAkG;IAClG,YAAoB,IAAgB,EAAU,cAA8B;QAAxD,SAAI,GAAJ,IAAI,CAAY;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAb5E,YAAO,GAAG,4EAAkB,CAAC;QAE7B,8EAA8E;QAC9E,2GAA2G;QAC3G,uBAAuB;QACvB,YAAO,GAAa,EAAE,CAAC,CAAC,0CAA0C;QAClE,gBAAW,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,2EAA2E;QAQlG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,oDAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACvD,IAAI,EAAE,IAAI,CAAC,EAAE;gBACX,IAAI,IAAI,EAAE;oBACR,IAAI,CAAC,UAAU,GAAG,IAAI,0DAAU,CAAC,IAAI,CAAC,CAAC;oBACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;iBAClB;YACH,CAAC;SACF,CAAC;IACJ,CAAC;IAED,oEAAoE;IAEpE,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,aAAa,CAAC,MAAkB;QAC9B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;IAC3B,CAAC;IAED,eAAe;QACb,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,qEAAqE;YACrE,IAAI,CAAC,UAAU,GAAG,IAAI,0DAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,OAAO,IAAI,CAAC,UAAU,CAAC;SACxB;QACD,OAAO;IACT,CAAC;IAED,iEAAiE;IACjE;;;;;;;;;;OAUG;IAEH,UAAU,CAAC,UAAsB;QAC/B,wFAAwF;QACxF,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAE3E,IAAI,QAAQ;YAAE,OAAO,wCAAE,CAAC,QAAQ,CAAC,CAAC;QAElC,IAAI,MAAM,GAAG,uEAAoB,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE9E,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEjE,kHAAkH;QAClH,OAAO,qEAAkB,CAAW,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CACjF,mDAAG,CAAC,QAAQ,CAAC,EAAE;YACb,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;YACpE,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CACH;IACH,CAAC;IAID,SAAS,CAAC,QAAgB;QAExB,sGAAsG;QACtG,MAAM,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;aAC1C,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;aAClD,IAAI,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;QAE1D,oDAAoD;QACpD,IAAI,MAAM;YAAE,OAAO,wCAAE,CAAC,MAAM,CAAC,CAAC;QAE9B,8DAA8D;QAC9D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,IAAI,CAAC,OAAO,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,YAAY,CAAC,OAAe;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,uBAAuB,GAAG,OAAO,EAAE,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,YAAY,CAAC,MAAc;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CACvD,mDAAG,CAAC,GAAG,EAAE;YACP,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC3C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAE,wCAAwC;QACzE,CAAC,CACA,CACF,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,OAAe;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,qBAAqB,GAAG,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED,OAAO,CAAC,QAAgB;QACtB,qCAAqC;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,QAAQ,GAAG,QAAQ,EAAE,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,QAAQ,CAAC,SAAiB,EAAE,UAAkB,EAAE,QAAgB;QAC9D,IAAI,MAAM,GAAG,uEAAoB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAExD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAE/C,OAAO,qEAAkB,CAAW,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACjF,CAAC;;4EA5HU,cAAc;+GAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;;;;;;;;;;;;;;;;;;;;;;;;AClBpB;AAEA;AACA;AAEA;;;AAMM,MAAO,cAAP,CAAqB;AAOzB;AACA,cAAoB,IAApB,EAAoC;AAAhB;AAPpB,mBAAU,4EAAV;AACA,kBAAS,4EAAT;AAEQ,+BAAsB,IAAI,iDAAJ,CAA+B,EAA/B,CAAtB;AACR,0BAAiB,KAAK,mBAAL,CAAyB,YAAzB,EAAjB;AAGyC;;AAEzC,qBAAmB,CAAC,IAAD,EAAa,aAAb,EAAkC;AACnD;AACA,SAAK,aAAL,GAAqB,IAAI,oEAAJ,GAClB,OADkB,CACV,KAAK,MAAL,GAAc,eAAd,GAAgC,aADtB,EACqC;AACtD,wBAAkB,EAAE,MAAM,IAAI,CAAC;AADuB,KADrC,EAIlB,sBAJkB,GAKlB,KALkB,EAArB;AAOE,SAAK,aAAL,CAAmB,KAAnB,GAA2B,KAA3B,CAAiC,KAAK,IAAI,OAAO,CAAC,GAAR,CAAY,KAAZ,CAA1C;AAEA,SAAK,aAAL,CAAmB,EAAnB,CAAsB,sBAAtB,EAA8C,QAAQ,IAAG;AACvD,WAAK,mBAAL,CAAyB,IAAzB,CAA8B,QAA9B;AACD,KAFD;AAIA,SAAK,aAAL,CAAmB,EAAnB,CAAsB,cAAtB,EAAuC,KAAD,IAAiB;AACrD;AACA;AACA,UAAI,KAAK,CAAC,WAAN,CAAkB,IAAlB,CAAuB,CAAC,IAAI,CAAC,CAAC,QAAF,KAAe,aAA3C,CAAJ,EAA+D;AAC7D,aAAK,cAAL,CAAoB,IAApB,CAAyB,0CAAI,CAAC,CAAD,CAA7B,EAAkC,SAAlC,CAA4C;AAC1C,cAAI,EAAE,QAAQ,IAAG;AACf,oBAAQ,CAAC,OAAT,CAAiB,OAAO,IAAG;AACzB,kBAAI,CAAC,OAAO,CAAC,QAAb,EAAuB;AACrB,uBAAO,CAAC,QAAR,GAAmB,IAAI,IAAJ,CAAS,IAAI,CAAC,GAAL,EAAT,CAAnB;AACD;AACF,aAJD,EADe,CAMf;;AACA,iBAAK,mBAAL,CAAyB,IAAzB,CAA8B,CAAC,GAAG,QAAJ,CAA9B;AACD;AATyC,SAA5C;AAWD;AACF,KAhBD;AAkBA,SAAK,aAAL,CAAmB,EAAnB,CAAsB,YAAtB,EAAoC,OAAO,IAAG;AAC5C,WAAK,cAAL,CAAoB,IAApB,CAAyB,0CAAI,CAAC,CAAD,CAA7B,EAAkC,SAAlC,CAA4C;AAC1C,YAAI,EAAE,QAAQ,IAAG;AACf,eAAK,mBAAL,CAAyB,IAAzB,CAA8B,CAAC,GAAG,QAAJ,EAAc,OAAd,CAA9B;AACD;AAHyC,OAA5C;AAKD,KAND;AAOH;;AAED,mBAAiB;AACf,QAAI,KAAK,aAAT,EAAwB;AACtB,WAAK,aAAL,CAAmB,IAAnB;AACD;AACF;;AAED,aAAW,CAAC,UAAD,EAAqB,QAArB,EAAuC,SAAvC,EAAwD;AACjE,QAAI,MAAM,GAAG,uEAAoB,CAAC,UAAD,EAAa,QAAb,CAAjC;AACA,UAAM,GAAG,MAAM,CAAC,MAAP,CAAc,WAAd,EAA2B,SAA3B,CAAT;AACA,WAAO,qEAAkB,CAAY,KAAK,OAAL,GAAe,UAA3B,EAAuC,MAAvC,EAA+C,KAAK,IAApD,CAAzB;AAED;;AAED,kBAAgB,CAAC,QAAD,EAAiB;AAC/B,WAAO,KAAK,IAAL,CAAU,GAAV,CAAyB,KAAK,OAAL,GAAe,kBAAf,GAAoC,QAA7D,CAAP;AACD,GAnEwB,CAqEzB;;;AACM,aAAN,CAAkB,QAAlB,EAAoC,OAApC,EAAmD;AAAA;;AAAA;AACjD;AACA;AAEA;AACA,aAAO,KAAI,CAAC,aAAL,EAAoB,MAApB,CAA2B,aAA3B,EAA0C;AAAC,yBAAiB,EAAE,QAApB;AAA8B;AAA9B,OAA1C,EACJ,KADI,CACE,KAAK,IAAI,OAAO,CAAC,GAAR,CAAY,KAAZ,CADX,CAAP;AALiD;AAOlD;;AAED,eAAa,CAAC,EAAD,EAAW;AACtB,WAAO,KAAK,IAAL,CAAU,MAAV,CAAiB,KAAK,OAAL,GAAe,WAAf,GAA6B,EAA9C,CAAP;AACD;;AAjFwB;;;mBAAd,gBAAc;AAAA;;;SAAd;AAAc,WAAd,cAAc;AAAA,cAFb;;;;;;;;;;;;;;;;;;;ACXgD;AACzB;AACmB;AAExD,mHAAmH;AAC5G,SAAS,kBAAkB,CAAI,GAAW,EAAE,MAAkB,EAAE,IAAgB;IACrF,MAAM,eAAe,GAAuB,IAAI,+DAAe,EAAK,CAAC;IACrE,OAAO,IAAI,CAAC,GAAG,CAAI,GAAG,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAC3D,mDAAG,CAAC,QAAQ,CAAC,EAAE;QACb,uDAAuD;QACvD,IAAI,QAAQ,CAAC,IAAI,EAAE;YACjB,eAAe,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;SACxC;QACD,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACtD,oDAAoD;QACpD,IAAI,UAAU,EAAE;YACd,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;SACrD;QACD,OAAO,eAAe,CAAC;IACzB,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAEM,SAAS,oBAAoB,CAAC,UAAkB,EAAE,QAAgB;IACvE,IAAI,MAAM,GAAG,IAAI,4DAAU,EAAE,CAAC;IAE9B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC5D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;IAExD,OAAO,MAAM,CAAC;AAChB,CAAC;;;;;;;;;;;;;;;;;;;;;;AC7BwE;AAEd;AAEd;;;;AAMtC,MAAM,eAAe;IAQ1B,2FAA2F;IAC3F,YAAoB,MAAqB,EAAU,MAAc;QAA7C,WAAM,GAAN,MAAM,CAAe;QAAU,WAAM,GAAN,MAAM,CAAQ;QARjE,WAAM,GAAG,4EAAkB,CAAC;QAG5B,sDAAsD;QAC9C,sBAAiB,GAAG,IAAI,iDAAe,CAAW,EAAE,CAAC,CAAC;QAC9D,iBAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAGgB,CAAC;IAEtE,mBAAmB,CAAC,IAAU;QAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,oEAAoB,EAAE;aAC5C,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,EAAE;YACjC,kBAAkB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK;SACrC,CAAC;aACD,sBAAsB,EAAE;aACxB,KAAK,EAAE,CAAC;QAEX,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAE9D,oDAAoD;QACpD,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,GAAE;YAC9C,qEAAqE;YACrE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,0CAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACxC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,GAAG,SAAS,EAAE,QAAQ,CAAC,CAAC;aACzE,CAAC;QACJ,CAAC,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,eAAe,EAAE,QAAQ,GAAE;YAC/C,4GAA4G;YAC5G,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,0CAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACxC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;aACtF,CAAC;QACJ,CAAC,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,gBAAgB,EAAE,SAAS,CAAC,EAAE;YAClD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzC,CAAC,CAAC;QAEF,8EAA8E;QAC9E,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAC,EAAE,EAAE;YAClE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,iDAAiD,CAAC;iBAC1E,KAAK;iBACL,IAAI,CAAC,0CAAI,CAAC,CAAC,CAAC,CAAC;iBACb,SAAS,CAAC;gBACT,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,GAAG,QAAQ,GAAG,eAAe,CAAC;aAChF,CAAC;QACN,CAAC,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAChE,CAAC;;8EArDU,eAAe;gHAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;IENhB,yEAAuD;IAEnD,iFAA2C;IAC7C,4DAAM;;;IAER,yEAAqE;IAEjE,kFAA6C;IAC/C,4DAAM;;;;ADJL,MAAM,mBAAmB;IAE9B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;sFALU,mBAAmB;iHAAnB,mBAAmB;QCPhC,qEAAI;QAAA,sEAAW;QAAA,4DAAK;QACpB,yEAAuB;QAEnB,+GAIM;QACN,+GAIM;QACR,4DAAS;;QAVyB,0DAAqB;QAArB,6IAAqB;QAKpB,0DAAkC;QAAlC,6IAAkC;;;;;;;;;;;;;;;;;;ACDhE,MAAM,wBAAwB;IAEnC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;gGALU,wBAAwB;sHAAxB,wBAAwB;QCPrC,oEAAG;QAAA,kFAAuB;QAAA,4DAAI;;;;;;;;;;;;;;;;;;;;;ACGyD;AAEtC;;;;;;;ICK3C,qEAA+B;IACzB,uDAAiB;IAAA,4DAAK;IAC1B,qEAAI;IAAA,uDAAc;IAAA,4DAAK;IACvB,qEAAI;IAAQ,gWAAS,wFAAoB,KAAC;IAAsB,qEAAU;IAAA,4DAAS;;;IAF/E,0DAAiB;IAAjB,iFAAiB;IACjB,0DAAc;IAAd,8EAAc;;ADAnB,MAAM,uBAAuB;IAUlC,YAAoB,YAA0B,EAAU,YAA4B;QAAhE,iBAAY,GAAZ,YAAY,CAAc;QAAU,iBAAY,GAAZ,YAAY,CAAgB;QATpF,UAAK,GAAW,EAAE,CAAC;QACnB,eAAU,GAAoC,IAAI,2DAAU,EAAuB,CAAC;QAEpF,mBAAc,GAAG;YACf,OAAO;YACP,WAAW;YACX,QAAQ;SACT;IAGD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC;YAC9C,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK;SAClC,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,IAAU;QACvB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,uBAAuB;YAC9B,YAAY,EAAE;gBACZ,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,aAAa,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;aAC/B;SACF;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iGAAmB,EAAE,MAAM,CAAC,CAAC;QACtE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC;YAChC,IAAI,EAAE,GAAG,EAAE;gBACT,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,aAAa,CAAC;gBAC7D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAc,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;oBAChD,gCAAgC;oBAChC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAc,CAAC,CAAC,SAAS,CAAC;wBACzE,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK;qBAClC,CAAC;iBACH;YACH,CAAC;SACF,CAAC;IACJ,CAAC;IAEO,UAAU,CAAC,IAAW,EAAE,IAAW;QACzC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACrE,CAAC;;8FAhDU,uBAAuB;qHAAvB,uBAAuB;QCZpC,yEAAiB;QAIe,mEAAQ;QAAA,4DAAK;QACrC,wEAAwB;QAAA,uEAAY;QAAA,4DAAK;QACzC,mEAA6B;QAC/B,4DAAK;QAEP,wEAAO;QACL,mHAIK;QACP,4DAAQ;;QALe,2DAAQ;QAAR,8EAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACToB;AACoB;AACS;AACH;AAC3B;AACG;AAC+B;AACN;AACA;AAChB;AACjB;AACoC;AACN;AACC;AAC7B;;;AAEnD,wEAAwE;AACxE,MAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,+DAAa,EAAC;IACpC;QACE,IAAI,EAAE,EAAE;QACR,qBAAqB,EAAE,QAAQ;QAC/B,WAAW,EAAE,CAAC,yDAAS,CAAC;QACxB,QAAQ,EAAE;YACR,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,2FAAmB,EAAC;YACjD,2FAA2F;YAC3F,EAAC,IAAI,EAAE,mBAAmB,EAAE,SAAS,EAAE,iGAAqB,EAAE,OAAO,EAAE,EAAC,MAAM,EAAE,wFAAsB,EAAC,EAAC;YACxG,EAAC,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,2FAAmB,EAAE,aAAa,EAAE,CAAC,8FAA0B,CAAC,EAAC;YAClG,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,kEAAc,EAAC;YAC1C,EAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,2EAAiB,EAAC;YAChD,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,0FAAmB,EAAE,WAAW,EAAE,CAAC,4DAAU,CAAC,EAAC;SAC3E;KACF;IACD,EAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,0FAAmB,EAAC;IAChD,EAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,oFAAiB,EAAC;IACjD,EAAC,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,6FAAoB,EAAC;IACvD,EAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,oFAAiB,EAAE,SAAS,EAAE,MAAM,EAAC;CAC9D,CAAC;AAMK,MAAM,gBAAgB;;gFAAhB,gBAAgB;8GAAhB,gBAAgB;kHAHjB,kEAAoB,CAAC,MAAM,CAAC,EAC5B,0DAAY;oIAEX,gBAAgB,qFAFjB,0DAAY;;;;;;;;;;;;;;;;;;;;;;;;;ACjCxB,gCAAgC;AACzB,MAAM,YAAY;IAIvB,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAHlD,UAAK,GAAG,gBAAgB,CAAC;IAG2B,CAAC;IAErD,QAAQ;QACN,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED,cAAc;QACZ,MAAM,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEhD,IAAI,CAAC,UAAU;YAAE,OAAO;QAExB,2EAA2E;QAC3E,MAAM,IAAI,GAAS,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAE1C,+JAA+J;QAC/J,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;;wEApBU,YAAY;0GAAZ,YAAY;QCVzB,iFAAwC;QAChC,qEAAU;QAAA,4DAAK;QAGvB,qEAAmB;QAEnB,yEAAiD;QAC7C,2EAA+B;QACnC,4DAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRoD;AAEiB;AACT;AACa;AAEvB;AACT;AACI;AACG;AACY;AACgB;AACM;AAC/B;AACS;AACV;AACyB;AACZ;AACM;AACS;AACF;AACjB;AACiB;AACnC;AAC0B;AACY;AACP;AACA;AACgB;AACb;AACD;AACZ;AACwB;AACG;AACd;AACS;;AA8CnF,MAAM,SAAS;;kEAAT,SAAS;uGAAT,SAAS,cAFR,wDAAY;4GALb;QACT,EAAC,OAAO,EAAE,oEAAiB,EAAE,QAAQ,EAAE,8EAAgB,EAAE,KAAK,EAAE,IAAI,EAAC;QACrE,EAAC,OAAO,EAAE,oEAAiB,EAAE,QAAQ,EAAE,0EAAc,EAAE,KAAK,EAAE,IAAI,EAAC;QACnE,EAAC,OAAO,EAAE,oEAAiB,EAAE,QAAQ,EAAE,kFAAkB,EAAE,KAAK,EAAE,IAAI,EAAC;KACxE,YAbC,qEAAa;QACb,iEAAgB;QAChB,mEAAgB;QAChB,0FAAuB;QACvB,wDAAW;QACX,gEAAmB;QACnB,gEAAY;QACZ,0DAAgB;oIASP,SAAS,mBA1ClB,wDAAY;QACZ,4DAAY;QACZ,+DAAa;QACb,2EAAiB;QACjB,2FAAmB;QACnB,iGAAqB;QACrB,kEAAc;QACd,2EAAiB;QACjB,2FAAmB;QACnB,qFAAiB;QACjB,8FAAoB;QACpB,4FAAmB;QACnB,4FAAmB;QACnB,+FAAoB;QACpB,uFAAkB;QAClB,uFAAkB;QAClB,wGAAuB;QACvB,0FAAmB;QACnB,0FAAmB;QACnB,6EAAgB;QAChB,sGAAuB;QACvB,yGAAwB;QACxB,2FAAmB;QACnB,oGAAsB,aAGtB,qEAAa;QACb,iEAAgB;QAChB,mEAAgB;QAChB,0FAAuB;QACvB,wDAAW;QACX,gEAAmB;QACnB,gEAAY;QACZ,0DAAgB;;;;;;;;;;;;;;;;;;;ACjEb,MAAM,iBAAiB;IAE5B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;kFALU,iBAAiB;+GAAjB,iBAAiB;QCP9B,yEAAwB;QAChB,oEAAS;QAAA,4DAAK;QAClB,4EAAmD;QAAA,8EAAmB;QAAA,4DAAS;;;;;;;;;;;;;;;;;;;;;;;IEDnF,wEAA4B;IACxB,wEAAwB;IAAA,uDAAwB;IAAA,4DAAK;IACrD,uEAA4B;IAAA,6HAAkE;IAAA,4DAAI;IAClG,oEAAG;IAAA,2EAAgB;IAAA,4DAAI;IACvB,qEAAI;IACI,2EAAgB;IAAA,4DAAK;IACzB,sEAAI;IAAA,mFAAuB;IAAA,4DAAK;IAChC,sEAAI;IAAA,qFAAyB;IAAA,4DAAK;IAClC,sEAAI;IAAA,6GAAiD;IAAA,4DAAK;IAC1D,sEAAI;IAAA,4JAAgG;IAAA,4DAAK;IAE7G,qEAAG;IAAA,wIAA4E;IAAA,4DAAI;IAEnF,2EAAyD;IAAA,wDAAiB;IAAA,4DAAO;IACrF,qEAAe;;;IAba,0DAAwB;IAAxB,qGAAwB;IAYS,2DAAiB;IAAjB,qFAAiB;;ADNvE,MAAM,oBAAoB;IAG/B,4DAA4D;IAC5D,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAChC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC;QACtD,sHAAsH;QACtH,2EAA2E;QAC3E,IAAI,CAAC,KAAK,GAAG,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;IAC/C,CAAC;IAEF,QAAQ;IACR,CAAC;;wFAZU,oBAAoB;kHAApB,oBAAoB;QCRjC,qEAAI;QAAA,oIAAyE;QAAA,4DAAK;QAClF,mIAce;;QAdA,0DAAW;QAAX,2EAAW;;;;;;;;;;;;;;;;;;;;ACCiC;;;;;ICQ/C,qEAA2C;IACvC,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,oFACJ;;;IAJR,yEAA0D;IAElD,oHAEK;IACT,4DAAK;;;IAHqB,0DAAmB;IAAnB,4FAAmB;;ADD9C,MAAM,mBAAmB;IAK9B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,YAAO,GAAG,4EAAkB,CAAC,CAAC,+EAA+E;QAC7G,qBAAgB,GAAa,EAAE,CAAC;IAEQ,CAAC;IAEzC,QAAQ;IACR,CAAC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACnE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,mBAAmB,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACrE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACtE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC9D,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC,CAAC;IACJ,CAAC;IAED,qBAAqB;QACnB,sDAAsD;QACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACzE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,4FAA4F;YAC5F,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAChC,CAAC,CAAC;IACJ,CAAC;;sFAnDU,mBAAmB;iHAAnB,mBAAmB;QCThC,wEAAc;QACV,4EAAqE;QAA7D,2IAAS,iBAAa,IAAC;QAAsC,yEAAc;QAAA,4DAAS;QAC5F,4EAAqE;QAA7D,2IAAS,iBAAa,IAAC;QAAsC,yEAAc;QAAA,4DAAS;QAC5F,4EAAqE;QAA7D,2IAAS,iBAAa,IAAC;QAAsC,yEAAc;QAAA,4DAAS;QAC5F,4EAAqE;QAA7D,2IAAS,iBAAa,IAAC;QAAsC,yEAAc;QAAA,4DAAS;QAC5F,4EAA+E;QAAvE,2IAAS,2BAAuB,IAAC;QAAsC,qFAAyB;QAAA,4DAAS;QAGjH,iHAMM;QACV,qEAAe;;QAPY,2DAAiC;QAAjC,iGAAiC;;;;;;;;;;;;;;;;;;;;;;;;IEPxD,yEAAwD;IAChD,0EAAe;IAAA,4DAAK;IACxB,uEAAgB;IACZ,8HACJ;IAAA,4DAAI;IACJ,yEAAyB;IACb,2RAAS,iFAAgB,KAAC;IAAsC,mEAAQ;IAAA,4DAAS;IACzF,4EAAqC;IAAA,qEAAU;IAAA,4DAAS;;;;IAGhE,yEAA4C;IAKlB,yTAAkB,2FAA0B,KAAC;IAAC,4DAAe;;ADT3F,0EAA0E;AACnE,MAAM,aAAa;IAGxB;QAFA,iBAAY,GAAG,KAAK,CAAC;IAEL,CAAC;IAEjB,QAAQ;IAER,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;IACzC,CAAC;IAED,kBAAkB,CAAC,KAAc;QAC/B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;;0EAfU,aAAa;2GAAb,aAAa;QCR1B,yEAA4B;QACxB,0GASM;QACN,yGAQM;QACV,4DAAM;;QAnBK,0DAAmB;QAAnB,mFAAmB;QAUpB,0DAAkB;QAAlB,kFAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IEOxB,yEAAkD;IAChD,iFAAqD;IACvD,4DAAM;;;IADa,0DAAiB;IAAjB,6EAAiB;;;;IAKxC,0EAA8D;IAK1D,uTAAa,iGACZ,IADmC,2PACrB,oFAAmB,KADE;IAMtC,4DAAa;;;IATX,0DAAsB;IAAtB,+EAAsB;;ADhBnB,MAAM,cAAc;IAOzB,YAAoB,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;QALjD,cAAS,GAAG,OAAO,CAAC;QACpB,eAAU,GAAG,CAAC,CAAC;QACf,aAAQ,GAAG,CAAC,CAAC;IAGwC,CAAC;IAEtD,QAAQ;QACN,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;YACpF,IAAI,EAAE,QAAQ,CAAC,EAAE;gBACf,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAC/B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;YACxC,CAAC;SACF,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,KAAU;QACpB,IAAI,IAAI,CAAC,UAAU,KAAI,KAAK,CAAC,IAAI,EAAE;YACjC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;YAC7B,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;IACH,CAAC;;4EA3BU,cAAc;4GAAd,cAAc;QCV3B,yEAA8B;QACxB,uDAAoE;QAAA,4DAAK;QAG/E,yEAA4B;QAKpB,sLAAuB,8EACd,eAAW,IADG;QACD,yEAAc;QAAA,4DAAS;QAC/C,4EAGwB;QADtB,sLAAuB,8EACd,eAAW,IADG;QACD,8EAAmB;QAAA,4DAAS;QAGxD,0EAAyB;QACvB,4GAEM;QACR,4DAAM;QAGR,4GAYM;;QAnCA,0DAAoE;QAApE,qIAAoE;QAQlE,0DAAuB;QAAvB,kFAAuB;QAIvB,0DAAuB;QAAvB,kFAAuB;QAKW,0DAAU;QAAV,gFAAU;QAMR,0DAAgB;QAAhB,gFAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbtD,MAAO,mBAAP,CAA0B;AAI9B;AACA,cAAoB,aAApB,EAA2D,MAA3D,EAAyF,eAAzF,EAAyH;AAArG;AAAuC;AAA8B;AAAqC;;AAE9H,UAAQ,IACP;;AAED,SAAO,CAAC,MAAD,EAAe;AACpB,SAAK,aAAL,CAAmB,OAAnB,CAA2B,MAAM,CAAC,QAAlC,EAA4C,SAA5C,CAAsD;AACpD,UAAI,EAAE,MAAM,KAAK,MAAL,CAAY,OAAZ,CAAoB,oBAAoB,MAAM,CAAC,OAA/C;AADwC,KAAtD;AAGD;;AAd6B;;;mBAAnB,qBAAmB;AAAA;;;QAAnB;AAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACXhC,gFAAuB,CAAvB,EAAuB,KAAvB,EAAuB,CAAvB;AAEQ;AACA,+EAAyD,CAAzD,EAAyD,IAAzD,EAAyD,CAAzD,EAAyD,CAAzD,EAAyD,QAAzD,EAAyD,CAAzD;AAEgF;AAA0B;AAEtG,+EAA6B,CAA7B,EAA6B,QAA7B,EAA6B,CAA7B;AACU;AAAA,eAAS,uBAAT;AAAwB,OAAxB;AAAkD;AAA2B;AAEvF,gFAA6B,EAA7B,EAA6B,QAA7B,EAA6B,CAA7B;AAI4B;AAA8B;AAIlE,kFAA2B,EAA3B,EAA2B,IAA3B,EAA2B,EAA3B,EAA2B,EAA3B,EAA2B,MAA3B;;AAGQ;AACF;AACA;AACF;AACA;AAA4C;AAAe;;;;;AAvBtD;AAAA;AAAiD;AAGxC;AAAA;AAON;AAAA;AACA;AAOA;AAAA;AAGN;AAAA;AAE0C;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBpD;AAEA;;;;;;;;;;;;;;;ACKgB;AACE;AAA+C;AACjD;;;;ADMV,MAAO,qBAAP,CAA4B;AAWhC,cAAoB,cAApB,EAA4D,KAA5D,EAA2F,cAA3F,EACS,eADT,EACmD,MADnD,EACiE;AAD7C;AAAwC;AAA+B;AAClF;AAA0C;AARnD,kBAAkB,EAAlB,CAQiE,CARjC;;AAIhC,oBAAsB,EAAtB;AAKI,SAAK,cAAL,CAAoB,YAApB,CAAiC,IAAjC,CAAsC,0CAAI,CAAC,CAAD,CAA1C,EAA+C,SAA/C,CAAyD;AACvD,UAAI,EAAE,IAAI,IAAG;AACX,YAAI,IAAJ,EAAU,KAAK,IAAL,GAAY,IAAZ;AACX;AAHsD,KAAzD;;AAMA,SAAK,MAAL,CAAY,kBAAZ,CAA+B,gBAA/B,GAAkD,MAAM,KAAxD;AACH;;AAED,UAAQ;AACN;AACA,SAAK,KAAL,CAAW,IAAX,CAAgB,SAAhB,CAA0B;AACxB,UAAI,EAAE,IAAI,IAAI,KAAK,MAAL,GAAc,IAAI,CAAC,QAAD;AADR,KAA1B,EAFM,CAMN;;AACA,SAAK,KAAL,CAAW,WAAX,CAAuB,SAAvB,CAAiC;AAC/B,UAAI,EAAE,MAAM,IAAG;AACb,cAAM,CAAC,KAAD,CAAN,IAAiB,KAAK,SAAL,CAAe,MAAM,CAAC,KAAD,CAArB,CAAjB;AACD;AAH8B,KAAjC;AAMA,SAAK,cAAL,GAAsB,CACpB;AACE,WAAK,EAAE,OADT;AAEE,YAAM,EAAE,OAFV;AAGE,kBAAY,EAAE,GAHhB;AAIE,uBAAiB,EAAE,CAJrB;AAKE,oBAAc,EAAE,0EALlB;AAME,aAAO,EAAE;AANX,KADoB,CAAtB;AAWA,SAAK,aAAL,GAAqB,KAAK,SAAL,EAArB;AACD;;AAED,aAAW;AACT,SAAK,cAAL,CAAoB,iBAApB;AACD;;AAED,WAAS;AACP,UAAM,SAAS,GAAG,EAAlB;;AACA,SAAK,MAAM,KAAX,IAAoB,KAAK,MAAL,CAAY,MAAhC,EAAwC;AACtC,eAAS,CAAC,IAAV,CAAe;AACb,aAAK,EAAE,KAAK,EAAE,GADD;AAEb,cAAM,EAAE,KAAK,EAAE,GAFF;AAGb,WAAG,EAAE,KAAK,EAAE;AAHC,OAAf;AAKD;;AACD,WAAO,SAAP;AACD,GA/D+B,CAiEhC;;AACA;;;;;;;;;AASA,WAAS,CAAC,OAAD,EAAgB;AACvB,QAAG,KAAK,UAAR,EAAoB;AAClB,WAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAA0B,CAAC,IAAI,CAAC,CAAC,OAAF,KAAc,OAA7C,EAAuD,MAAvD,GAAgE,IAAhE;AACD;AACF;;AAED,cAAY;AACV,QAAI,KAAK,MAAT,EAAiB;AACf;AACA,WAAK,cAAL,CAAoB,gBAApB,CAAqC,KAAK,MAAL,CAAY,QAAjD,EAA2D,SAA3D,CAAqE;AACnE,YAAI,EAAE,QAAQ,IAAI,KAAK,QAAL,GAAgB;AADiC,OAArE;AAGD;AACF;;AAED,gBAAc,CAAC,IAAD,EAAmB;AAC/B,SAAK,SAAL,GAAiB,IAAjB;;AACA,QAAI,KAAK,SAAL,CAAe,OAAf,KAA2B,UAA3B,IAAyC,KAAK,IAAlD,EAAwD;AACtD,WAAK,cAAL,CAAoB,mBAApB,CAAwC,KAAK,IAA7C,EAAmD,KAAK,MAAL,CAAY,QAA/D;AACD,KAFD,MAEO;AACL,WAAK,cAAL,CAAoB,iBAApB;AACD;AACF;;AAjG+B;;;mBAArB,uBAAqB;AAAA;;;QAArB;AAAqB;AAAA;AAAA;;;;;;;;;;;;;;;ACdlC,gFAAiB,CAAjB,EAAiB,KAAjB,EAAiB,CAAjB,EAAiB,CAAjB,EAAiB,KAAjB,EAAiB,CAAjB;AAGY;AAEA;AACI;;AAGA,6EAAK,CAAL,EAAK,QAAL;AACY;AAAS;AACjB;AAAG;AAAmC;AAE1C,8EAAK,EAAL,EAAK,QAAL;AACY;AAAI;AACZ;AAAG;AAAc;AAErB,8EAAK,EAAL,EAAK,QAAL;AACY;AAAY;AACpB;AAAG;;AAA+B;AAEtC,8EAAK,EAAL,EAAK,QAAL;AACY;AAAa;AACrB;AAAG;;AAAsC;AAGjD,iFAAyB,EAAzB,EAAyB,KAAzB,EAAyB,CAAzB,EAAyB,EAAzB,EAAyB,QAAzB,EAAyB,CAAzB;AAEwC;AAAI;AACpC;AAAQ;AAAA,eAAS,cAAU,UAAV,CAAT;AAA8B,OAA9B;AAAwD;AAAO;AAOvF,kFAAmB,EAAnB,EAAmB,QAAnB,EAAmB,EAAnB,EAAmB,EAAnB,EAAmB,EAAnB,EAAmB,KAAnB,EAAmB,EAAnB;AAMgD;AAAA,eAAa,0BAAb;AAAmC,OAAnC;AACpC;AAAI;AAAW;AACf;AAAG;AAAuB;AAC1B;AAAI;AAAW;AACf;AAAG;AAAqB;AAE5B;AAAyB;AAAA,eAAa,0BAAb;AAAmC,OAAnC;AACrB;AAAI;AAAS;AACb;AAAG;AAAoB;AAE3B;AAAsB;AAAA,eAAa,0BAAb;AAAmC,OAAnC;AAClB;AAAI;AAAM;AACV;AAEJ;AACA;AAAwB;AAAA,eAAa,0BAAb;AAAmC,OAAnC;AACpB;AACJ;;;;;AAxDK;AAAA;AAAkD;AAGhC;AAAA;AAKZ;AAAA;AAIA;AAAA;AAIA;AAAA;AAIA;AAAA;AAmBN;AAAA;AAEE;AAAA;AAEA;AAAA;AAIA;AAAA;AAIU;AAAA,8FAA0B,QAA1B,EAA0B,iBAA1B;AAIQ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DC;;;;;;;;;;;;ICK1B,0EAAqD;IACzC,wEAAa;IAAA,4DAAS;IAAA,oHAClC;IAAA,4DAAM;;;;IAPd,yEAAgC;IAEpB,uEAAY;IAAA,4DAAK;IAEzB,yEAAmB;IACf,qHAEM;IACV,4DAAM;IAEN,yEAAmB;IAEX,oEACuC;IACvC,yEAAuB;IAEP,qEAAS;IAAA,4DAAS;IAC1B,qEAAG;IAAA,wDAAmC;IAAA,4DAAI;IAE9C,uEAAK;IACO,gEAAI;IAAA,4DAAS;IACrB,qEAAG;IAAA,wDAAc;IAAA,4DAAI;IAEzB,uEAAK;IACO,wEAAY;IAAA,4DAAS;IAC7B,qEAAG;IAAA,wDAA+B;;IAAA,4DAAI;IAE1C,uEAAK;IACO,yEAAa;IAAA,4DAAS;IAC9B,qEAAG;IAAA,wDAAsC;;IAAA,4DAAI;IAGrD,0EAAyB;IAEgF,wEAAY;IAAA,4DAAS;IAMtI,0EAAmB;IAKgC,sSAAY,+EAAc,KAAC;IAE9D,sEAAI;IAAA,uEAAW;IAAA,4DAAK;IACpB,gFAA8F;IAA/D,0TAAa,8FAA2B,IAAP;IAA8B,4DAAW;IACzG,0EAAiB;IAAA,uEAAW;IAAA,4DAAK;IACjC,gFAA2F;IAA3D,0TAAa,4FAAyB,IAAP;IAA4B,4DAAW;IACtG,0EAAiB;IAAA,qEAAS;IAAA,4DAAK;IAC/B,gFAAyF;IAAzD,0TAAa,2FAAwB,IAAP;IAA2B,4DAAW;IACpG,0EAAiB;IAAA,6EAAiB;IAAA,4DAAK;IACvC,2EAAoB;IACE,kEAAM;IAAA,4DAAQ;IAChC,6EAAmF;IAA5E,uTAAa,sFAAmB,IAAP;IAAhC,4DAAmF;IACnF,6EAAqB;IAAA,qEAAS;IAAA,4DAAQ;IACtC,6EAAyF;IAAlF,uTAAa,yFAAsB,IAAP;IAAnC,4DAAyF;IAKrG,2EAA2B;IACvB,mFAAuD;IAC3D,4DAAM;;;;IA5DqB,0DAAoB;IAApB,2EAAoB;IAO1C,0DAAiD;IAAjD,gMAAiD;IAAC,iGAAwB;IAKpE,0DAAmC;IAAnC,yHAAmC;IAInC,0DAAc;IAAd,kFAAc;IAId,0DAA+B;IAA/B,4JAA+B;IAI/B,0DAAsC;IAAtC,qKAAsC;IAKrC,0DAA4B;IAA5B,gFAA4B;IAUnC,0DAAkC;IAAlC,oHAAkC;IAIA,0DAAiC;IAAjC,+FAAiC;IAEhC,0DAA+B;IAA/B,6FAA+B;IAE/B,0DAA8B;IAA9B,4FAA8B;IAInD,0DAAyB;IAAzB,uFAAyB;IAEzB,0DAA4B;IAA5B,0FAA4B;IAMzB,0DAAiB;IAAjB,iFAAiB;;ADrDhD,MAAM,mBAAmB;IAW9B,YAAoB,cAA8B,EAAU,aAA6B,EAAU,MAAqB;QAApG,mBAAc,GAAd,cAAc,CAAgB;QAAU,kBAAa,GAAb,aAAa,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAe;QACtH,0GAA0G;QAC1G,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,oDAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;IACrF,CAAC;IAVgD,kBAAkB,CAAC,MAAW;QAC7E,sEAAsE;QACtE,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACvB,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;SAC3B;IACH,CAAC;IAQD,QAAQ;QACN,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAClE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC;IACJ,CAAC;IAED,YAAY;QACV,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YAC1D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;YAEpD,gHAAgH;YAChH,gHAAgH;YAChH,yEAAyE;YACzE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC;IAEJ,CAAC;;sFArCU,mBAAmB;iHAAnB,mBAAmB;;;;;;+JAAnB,8BAA0B;;QCXnC,iHAoEM;;QApEY,4EAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IEiB1B,6EAAiE;IAAA,uDAAkB;IAAA,4DAAS;;;IAAlD,kFAAsB;IAAC,0DAAkB;IAAlB,kFAAkB;;;;IAhB3F,yEAA+C;IACJ,qSAAY,8EAAa,KAAC;IAEjE,yEAAyB;IACO,qEAAU;IAAA,4DAAQ;IAChD,4EAAiH;IAAhC,sTAAa,4FAChG,IADkH;IAAhH,4DAAiH;IAGnH,yEAAyB;IACO,mEAAQ;IAAA,4DAAQ;IAC9C,6EAAiH;IAAhC,uTAAa,4FAChG,IADkH;IAAhH,4DAAiH;IAGnH,2EAAyB;IACY,kEAAM;IAAA,4DAAQ;IACjD,8EAAoG;IAAhC,yTAAa,6FACnF,IADqG;IACjG,8HAA4F;IAC9F,4DAAS;IAGX,8EAAmD;IAAA,yEAAa;IAAA,4DAAS;IACzE,8EAA4E;IAApE,mSAAS,gFAAc,KAAC;IAA4C,yEAAa;IAAA,4DAAS;IAElG,2EAAiB;IAMX,yTAAa,8FAClB,IADqC,2OAEvB,+EAAa,KAFU;IAER,uEAAW;IAAA,4DAAS;IAC9C,8EAM0B;IAFxB,yTAAa,8FAClB,IADqC,2OAEvB,+EAAa,KAFU;IAER,0EAAc;IAAA,4DAAS;;;IAjC8B,0DAA+B;IAA/B,6FAA+B;IAK/B,0DAA+B;IAA/B,6FAA+B;IAK5C,0DAA+B;IAA/B,6FAA+B;IACtE,0DAAa;IAAb,sFAAa;IAatC,0DAAgC;IAAhC,8FAAgC;IAOhC,0DAAgC;IAAhC,8FAAgC;;;IAStC,0EAAkD;IAC9C,iFAAqD;IACzD,4DAAM;;;IADe,0DAAiB;IAAjB,8EAAiB;;;;IAI1C,0EAA8D;IAK1D,6TAAa,kGACZ,IADmC,iQACrB,qFAAmB,KADE;IAMtC,4DAAa;;;IATX,0DAAsB;IAAtB,+EAAsB;;AD7CnB,MAAM,mBAAmB;IAO9B,wEAAwE;IACxE,YAAoB,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;QAHjD,eAAU,GAAG,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAC,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAC,CAAC;QAIrF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;IACvD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,mFAAmF;QACnF,mDAAmD;IACrD,CAAC;IAED,mFAAmF;IACnF,gHAAgH;IAChH;;;;OAIG;IAEH,WAAW;QACT,+EAA+E;QAC/E,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAClD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC;gBACvD,IAAI,EAAE,QAAQ,CAAC,EAAE;oBACf,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE;wBAC1C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC;wBAC/B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;qBACvC;gBACH,CAAC;aACF,CAAC;SACH;IAEH,CAAC;IAED,mDAAmD;IACnD,YAAY;QACV,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;QACvD,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW,CAAC,KAAU;QACpB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE,UAAU,KAAI,KAAK,CAAC,IAAI,EAAE;YAChE,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;YACxC,uFAAuF;YACvF,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAClD,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;IACH,CAAC;;sFAvDU,mBAAmB;iHAAnB,mBAAmB;QCXhC,yEAA8B;QACxB,uDAA+C;QAAA,4DAAK;QAG1D,gHA0CM;QAEN,yEAAiB;QACb,+GAEM;QACV,4DAAM;QAEN,+GAYM;;QAjEA,0DAA+C;QAA/C,wJAA+C;QAGxB,0DAAgB;QAAhB,gFAAgB;QA6CjB,0DAAU;QAAV,gFAAU;QAKM,0DAAgB;QAAhB,gFAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEpDxD;AACE;AACF;;;;;;AAgBY;AAA2F;AAAQ;;;;;;AACnG;AAA2F;;AAAqC;;;;;AAArC;AAAA;;;;;;AAVrG,0EAAoE,CAApE,EAAoE,KAApE,EAAoE,CAApE,EAAoE,MAApE,EAAoE,EAApE;AAGM;AACF;AACA,+EAAuB,CAAvB,EAAuB,KAAvB,EAAuB,EAAvB,EAAuB,CAAvB,EAAuB,OAAvB,EAAuB,EAAvB,EAAuB,CAAvB,EAAuB,MAAvB,EAAuB,EAAvB;AAGkC;;AAAiC;AAC7D;AACA;AACF;AAEF;AAAG;AAAmB;;;;;;AAVjB;AAAA;AAK2B;AAAA;AACD;AAAA;AACC;AAAA;AAG7B;AAAA;;;;;;AAlBX;AAKE;;AAiBF;;;;;;;AAnBE;AAEwB;AAAA;;;;ADDxB,MAAO,uBAAP,CAA8B;AAUlC,cAAmB,cAAnB,EAAiD;AAA9B,yCAA8B,CANjD;AACA;AACA;;AAEA,0BAAiB,EAAjB;AAEsD;;AAEtD,UAAQ,IACP;;AAED,aAAW;AACT,QAAI,CAAC,KAAK,QAAV,EAAoB,OADX,CAGT;AACA;AACA;;AACA,SAAK,cAAL,CAAoB,WAApB,CAAgC,KAAK,QAArC,EAA+C,KAAK,cAApD,EAAoE,IAApE,CAAyE,MAAK;AAC5E,WAAK,WAAL,EAAkB,KAAlB;AACD,KAFD;AAGD;;AAxBiC;;;mBAAvB,yBAAuB;AAAA;;;QAAvB;AAAuB;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACVpC,gFAAkB,CAAlB,EAAkB,KAAlB,EAAkB,CAAlB;AAEI;;AAIA;;AAuBF;AAEA,gFAAyB,CAAzB,EAAyB,MAAzB,EAAyB,CAAzB,EAAyB,CAAzB;AAC8B;AAAA,eAAY,iBAAZ;AAAyB,OAAzB;AAC1B,gFAAyB,EAAzB,EAAyB,OAAzB,EAAyB,CAAzB;AAGS;AAAA;AAAA;AAFP;AAMA,iFAAgC,EAAhC,EAAgC,QAAhC,EAAgC,EAAhC;AACgF;AAAI;;;;;;;AAvClF;AAAA;AAQH;AAAA;AA0BQ;AAAA;AAKG;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxC+C;AAC3B;AAMqB;;;;;;;;ICPzD,yEAAuD;IACrD,qEAAuE;IACvE,0EAAyB;IAGrB,8VAAS,uFAAmB,KAAC;IAG9B,+DAAI;IAAA,4DAAS;IACd,6EAIC;IAFC,8VAAS,yFAAqB,KAAC;IAEhC,mEAA2B;IAAA,4DAAS;;;IAZlC,0DAAmB;IAAnB,qJAAmB;IAAC,wFAAmB;IAGxC,0DAAyB;IAAzB,qFAAyB;IAMzB,0DAAyB;IAAzB,qFAAyB;;;IAuCnB,yEAA4C;IAAA,uDAAiD;;IAAA,4DAAK;;;IAAtD,0DAAiD;IAAjD,4OAAiD;;;IAFjG,qEAAwC;IACxB,uDAAsB;IAAA,4DAAS;IAC3C,4HAAkG;IACtG,4DAAK;;;;IAFW,0DAAsB;IAAtB,yIAAsB;IAC7B,0DAA8B;IAA9B,iGAA8B;;;;;IAb/C,0EAAkF;IAC1E,uEAAY;IAAA,4DAAK;IACrB,oEAAG;IAAA,uDAA2C;IAAA,4DAAI;IAClD,4EAAqB;IAGG,+DAAI;IAAA,4DAAK;IACzB,sEAAI;IAAA,gEAAI;IAAA,4DAAK;IAGjB,yEAAO;IACP,wHAGK;IACL,4DAAQ;IAGZ,uEAAK;IAEG,6EACA;IAAA,2EAAsB;IAClB,sEAAoG;IACxG,4DAAM;IAGV,8EAC2F;IAAnF,sSAAS,sFAAoB,KAAC;IAClC,uEAAkC;IAAC,wEACvC;IAAA,4DAAS;IACT,8EAC0E;IAAlE,sSAAS,sFAAoB,KAAC;IAClC,uEAA+B;IAAC,wEACpC;IAAA,4DAAS;IACT,8EAC4E;IAApE,sSAAS,uFAAqB,KAAC;IACnC,uEAAiC;IAAC,wEACtC;IAAA,4DAAS;;;IAnCV,0DAA2C;IAA3C,4LAA2C;IASrB,0DAAiB;IAAjB,0FAAiB;IAWe,0DAAgD;IAAhD,0KAAgD;IAK9D,0DAAmD;IAAnD,mHAAmD;IAInD,0DAAkC;IAAlC,kGAAkC;IAIjC,0DAAmC;IAAnC,mGAAmC;;;ADzD9E,MAAM,oBAAoB;IAS/B,YAAoB,cAA8B,EAAU,aAA6B;QAArE,mBAAc,GAAd,cAAc,CAAgB;QAAU,kBAAa,GAAb,aAAa,CAAgB;QAJzF,wBAAmB,GAAG,KAAK,CAAC;QAC5B,YAAO,GAAG,4EAAkB,CAAC;QAI3B,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,oDAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;IACrF,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,iFAAiF;IACjF,YAAY,CAAC,CAAM;QACjB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,YAAY,CAAC,KAAY;QACvB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;YAC/B,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,uEAAuE;YACtH,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;YACjC,4EAA4E;YAC5E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC7B,IAAI,CAAC,CAAC,MAAM;oBAAE,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE;oBAAE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YACzC,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,OAAe;QACzB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YACrD,kEAAkE;YAClE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;YACtE,6FAA6F;QAC/F,CAAC,CAAC;IACJ,CAAC;IAED,0DAA0D;IAC1D,kBAAkB;QAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,yDAAY,CAAC;YAC/B,GAAG,EAAE,IAAI,CAAC,OAAO,GAAG,iBAAiB;YACrC,SAAS,EAAE,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK;YACtC,OAAO,EAAE,IAAI;YACb,eAAe,EAAE,CAAC,OAAO,CAAC;YAC1B,iBAAiB,EAAE,IAAI;YACvB,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;SAC9B,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,iBAAiB,GAAG,CAAC,IAAI,EAAE,EAAE;YACzC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE;YAChE,IAAI,QAAQ,EAAE;gBACZ,MAAM,KAAK,GAAU,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC/B,IAAI,KAAK,CAAC,MAAM,EAAE;oBAChB,wCAAwC;oBACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;oBAC/B,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;oBACjC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC/C;aACF;QACH,CAAC;IACH,CAAC;;wFAvEU,oBAAoB;kHAApB,oBAAoB;QCfjC,yEAAiB;QACf,gHAeM;QACR,4DAAM;QAEN,yEAAsB;QAEZ,qEAAU;QAAA,4DAAK;QACnB,yEAI6D;QAFxD,qJAAY,wBAAoB,IAAC;QAGjC,kEAAkC;QACnC,6EACJ;QAAA,4DAAM;QAEN,qEACA;QAAA,uEAAmE;QACnE,oEACA;QAAA,uEAAyD;QAC7D,4DAAM;QAEN,mHAuCM;QACR,4DAAM;;QA5EiC,0DAAgB;QAAhB,sFAAgB;QAsB5C,0DAAiD;QAAjD,mKAAiD;QASrB,0DAAqB;QAArB,kFAAqB;QAErB,0DAAqB;QAArB,kFAAqB;QAGP,0DAA6B;QAA7B,6JAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IETlF,0EAA4D;IACtD,sEAAW;IAAA,4DAAK;;;IAsBZ,sEAAoC;IAClC,qEAA6H;IAC7H,yEAAQ;IAAA,uDAAyC;;IAAA,4DAAS;;;IADd,0DAA0D;IAA1D,4LAA0D;IAC9F,0DAAyC;IAAzC,8JAAyC;;;IAEnD,sEAAoC;IAClC,qEAA0H;IAC1H,yEAAQ;IAAA,uDAAsC;;IAAA,4DAAS;;;IADX,0DAAuD;IAAvD,yLAAuD;IAC3F,0DAAsC;IAAtC,2JAAsC;;;;;IAdpD,yEAKC;IACK,uDAAmB;IAAA,4DAAK;IAC5B,qEAAI;IACF,2HAGM;IACN,2HAGM;IACR,4DAAK;IACL,qEAAI;IAAA,uDAAiC;;IAAA,4DAAK;IAC1C,qEAAI;IACM,6JAAS,wBAAwB,IAAC,gTAAU,8FAAyB,KAAnC;IAA4D,kEAAM;IAAA,4DAAS;;;;IAlBrH,uMAE2C;IAH3C,kFAAkB;IAMhB,0DAAmB;IAAnB,mFAAmB;IAEf,0DAA4B;IAA5B,+FAA4B;IAI5B,0DAA4B;IAA5B,+FAA4B;IAKhC,0DAAiC;IAAjC,wJAAiC;;;IA5B7C,0EAAyD;IAI1B,kEAAO;IAAA,4DAAK;IACnC,yEAAuB;IAAA,oEAAS;IAAA,4DAAK;IACrC,yEAAuB;IAAA,yEAAc;IAAA,4DAAK;IAC1C,0EAAuB;IAAA,mEAAO;IAAA,4DAAK;IAGvC,6EAA4B;IAC1B,uHAsBK;IACP,4DAAQ;;;IAvBqC,2DAAW;IAAX,oFAAW;;;;IA2B5D,0EAA6G;IAKzG,4TAAa,kGACZ,IADmC,gQACrB,qFAAmB,KADE;IAMtC,4DAAa;;;IATX,0DAAsB;IAAtB,+EAAsB;;AD9DnB,MAAM,iBAAiB;IAQ5B,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QALlD,cAAS,GAAG,QAAQ,CAAC;QACrB,eAAU,GAAG,CAAC,CAAC;QACf,aAAQ,GAAG,CAAC,CAAC;QACb,YAAO,GAAG,KAAK,CAAC;IAEsC,CAAC;IAEvD,QAAQ;QACN,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,YAAY;QACV,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;YACxF,IAAI,EAAE,QAAQ,CAAC,EAAE;gBACf,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAChC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;gBACtC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,4DAA4D;YACpF,CAAC;SACF,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,EAAU;QACtB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;YAC9C,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SAEhF,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,KAAU;QACpB,IAAI,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC,IAAI,EAAE;YACjC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;YAC7B,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;IACH,CAAC;;kFArCU,iBAAiB;+GAAjB,iBAAiB;QCV9B,yEAAyB;QAIb,yLAAuB,iFACd,kBAAc,IADA;QAG7B,kEAA8B;QAAA,kEAChC;QAAA,4DAAS;QAET,4EAIC;QAFO,yLAAuB,iFACd,kBAAc,IADA;QAG7B,kEAAmC;QAAA,iEACrC;QAAA,4DAAS;QAET,4EAIC;QAFO,yLAAuB,iFACd,kBAAc,IADA;QAG7B,kEAAiC;QAAA,mEACnC;QAAA,4DAAS;QAIb,+GAEM;QAEN,gHAoCM;QAEN,+GAYM;;QA9EM,0DAAuB;QAAvB,kFAAuB;QAQvB,0DAAuB;QAAvB,kFAAuB;QAQvB,0DAAuB;QAAvB,kFAAuB;QAQjB,0DAAwC;QAAxC,4GAAwC;QAIxC,0DAAqC;QAArC,yGAAqC;QAsCX,0DAA+D;QAA/D,2IAA+D;;;;;;;;;;;;;;;;;;;;AC9DpG,MAAM,sBAAsB;IAOjC,YAAmB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QANzC,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAG,EAAE,CAAC;QACb,cAAS,GAAG,EAAE,CAAC;QACf,kBAAa,GAAG,EAAE,CAAC;QACnB,WAAM,GAAG,KAAK,CAAC;IAE8B,CAAC;IAE9C,QAAQ;IACR,CAAC;IAED,OAAO;QACL,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;;4FAnBU,sBAAsB;oHAAtB,sBAAsB;QCRnC,yEAA0B;QACU,uDAAS;QAAA,4DAAK;QAElD,yEAAwB;QACnB,uDAAW;QAAA,4DAAI;QAEpB,yEAA0B;QACQ,8IAAS,aAAS,IAAC;QAAC,uDAAa;QAAA,4DAAS;QAC1E,4EAAmD;QAApB,8IAAS,aAAS,IAAC;QAAC,wDAAiB;QAAA,4DAAS;;QAP3C,0DAAS;QAAT,0EAAS;QAGxC,0DAAW;QAAX,4EAAW;QAGsC,0DAAa;QAAb,8EAAa;QACd,0DAAiB;QAAjB,kFAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;IEAlE,0EAA4D;IAMxD,6VAAU,uFAAmB,KAAC;IAJhC,4DAKwD;IACxD,wEAAO;IAAA,uDAAQ;IAAA,4DAAQ;;;;IAJrB,0DAAwC;IAAxC,2GAAwC;IAInC,0DAAQ;IAAR,wEAAQ;;ADRd,MAAM,mBAAmB;IAK9B,YAAmB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAJzC,aAAQ,GAAG,EAAE,CAAC;QACd,mBAAc,GAAU,EAAE,CAAC;QAC3B,kBAAa,GAAU,EAAE,CAAC;IAEmB,CAAC;IAE9C,QAAQ;IACR,CAAC;IAED,aAAa,CAAC,YAAoB;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAEvD,2EAA2E;QAC3E,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7F,CAAC;;sFAfU,mBAAmB;iHAAnB,mBAAmB;QCRhC,yEAA0B;QACU,uDAA2B;QAAA,4DAAK;QAClE,4EAAwG;QAA5B,2IAAS,qBAAiB,IAAC;QACrG,0EAAiD;QAAA,iEAAO;QAAA,4DAAO;QAGnE,yEAAwB;QAEpB,+GASM;QACR,4DAAO;QAET,0EAA0B;QACsB,4IAAS,qBAAiB,IAAC;QAAC,kEAAM;QAAA,4DAAS;;QApBvD,0DAA2B;QAA3B,qGAA2B;QAOlB,0DAAiB;QAAjB,uFAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEQ9C,6EAA0D,CAA1D,EAA0D,GAA1D,EAA0D,EAA1D;AACoE;AAAK;;;;;;;;;;;;;;;;AAb7E;AACI,6EAAqB,CAArB,EAAqB,GAArB,EAAqB,CAArB;AAGgC;AAAO;AAEvC,6EAAqB,CAArB,EAAqB,GAArB,EAAqB,EAArB;AACsE;AAAK;AAE3E,6EAAqB,CAArB,EAAqB,GAArB,EAAqB,EAArB;AACyE;AAAQ;AAEjF;AAGJ;;;;AAZU;AAAA;AASD;AAAA;;;;;;;;AAYT,+EAA8C,CAA9C,EAA8C,GAA9C,EAA8C,EAA9C;AACuD;AAAY;AAC/D;AACA;AAAyB;AAAA;AAAA;AAAA,aAAS,0EAAT;AAAiB,KAAjB;AAAmB;AAAM;;;;;;AAN1D;AACI;AACA;AAA+E;;AAAoC;AACnH;AAKJ;;;;;AAPS;AAAA;AAA+C;AAC2B;AAAA;;;;;;;;AASnF;AAA6G;AAAA;AAAA;AAAA,aAAY,yEAAZ;AAAmB,KAAnB;AACzG;AAEI;AAAA;AAAA;AAAA,aAAa,0FAAb;AAA4B,KAA5B;AAFJ;AAMA;AAEI;AAAA;AAAA;AAAA,aAAa,0FAAb;AAA4B,KAA5B;AAFJ;AAMA;AAA2D;AAAK;;;;;AAV5D;AAAA;AAMA;AAAA;;;;ADnCV,MAAO,YAAP,CAAmB;AAGvB;AACA;AACA,cAAmB,cAAnB,EAA2D,MAA3D,EACoB,MADpB,EACyC;AADtB;AAAwC;AACvC;AALpB,iBAAa,EAAb;AAK6C;;AAE7C,UAAQ,IACP,CATsB,CAWvB;;;AACA,OAAK;AACH,SAAK,cAAL,CAAoB,KAApB,CAA0B,KAAK,KAA/B,EAAsC,SAAtC,CAAgD;AAC9C,UAAI,EAAE,CAAC,IAAG;AACR,aAAK,MAAL,CAAY,aAAZ,CAA0B,UAA1B;AACA,aAAK,KAAL,GAAa,EAAb,CAFQ,CAES;AAClB;AAJ6C,KAAhD;AAMD;;AAED,QAAM;AACJ,SAAK,cAAL,CAAoB,MAApB,GADI,CAC0B;;AAC9B,SAAK,MAAL,CAAY,aAAZ,CAA0B,GAA1B,EAFI,CAE4B;AACjC;;AAxBsB;;;mBAAZ,cAAY;AAAA;;;QAAZ;AAAY;AAAA;AAAA;AAAA;AAAA;AAAA;ACVzB,gFAAsE,CAAtE,EAAsE,KAAtE,EAAsE,CAAtE,EAAsE,CAAtE,EAAsE,GAAtE,EAAsE,CAAtE;AAEyE;AAAU;AAC3E;AACI;;AAgBA,+EAAqB,CAArB,EAAqB,GAArB,EAAqB,CAArB;AACuE;AAAM;AAIjF;;AAWA;;AAeJ;;;;AA/CuB;AAAA;AAqBI;AAAA;AAWhB;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCgE;AAC8C;;;;;;;;;;ICsErH,qEAA2C;IACvC,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,oFACJ;;;IAJN,0EAAqD;IAE/C,mHAEK;IACT,4DAAK;;;IAHqB,0DAAmB;IAAnB,4FAAmB;;AD5D1C,MAAM,iBAAiB;IAO5B,gDAAgD;IAChD,YAAoB,cAA8B,EAAU,MAAqB,EAAU,EAAsB,EAAU,MAAc;QAArH,mBAAc,GAAd,cAAc,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAe;QAAU,OAAE,GAAF,EAAE,CAAoB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAP/H,mBAAc,GAAG,IAAI,uDAAY,EAAE,CAAC;QAG9C,YAAO,GAAS,IAAI,IAAI,EAAE,CAAC;QAC3B,qBAAgB,GAAa,EAAE,CAAC,CAAC,iFAAiF;IAG2B,CAAC;IAE9I,QAAQ;QACN,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,yDAAyD;QACzD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,GAAE,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,cAAc;QACZ,oGAAoG;QACpG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAChC,MAAM,EAAE,CAAC,QAAQ,CAAC;YAClB,QAAQ,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACnC,OAAO,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAClC,WAAW,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACtC,IAAI,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAC/B,OAAO,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAClC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,gEAAoB,CAAC,CAAC,CAAC,EAAE,gEAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;YACvF,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;SAC3E,CAAC;QAEF,iGAAiG;QACjG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9D,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;QACtE,CAAC,CAAC;IACJ,CAAC;IAED,2CAA2C;IAC3C,WAAW,CAAC,OAAe;QACzB,OAAO,CAAC,OAAwB,EAAE,EAAE;YAClC,0GAA0G;YAC1G,OAAO,OAAO,EAAE,KAAK,KAAK,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,UAAU,EAAE,IAAI,EAAC;QAChG,CAAC;IACH,CAAC;IAED,QAAQ;QACN,yBAAyB;QACzB,6EAA6E;QAC7E,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YAEzE,uCAAuC;YACvC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,2GAA2G;QAC7G,CAAC,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,yDAAyD;QACzD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;;kFA3DU,iBAAiB;+GAAjB,iBAAiB;QCP9B,0EAAkG;QAAjE,uKAAkC,cAAU,IAAC;QAC5E,wEAAqC;QAAA,kEAAO;QAAA,4DAAK;QACjD,gEAAI;QA2CJ,yEAAkB;QACyC,mEAAQ;QAAA,4DAAQ;QACzE,2EAAgC;QAC9B,sEAA0F;QAAC,mEAC7F;QAAA,4DAAQ;QACR,4EAAgC;QAC9B,uEAAwF;QAAC,kEAC3F;QAAA,4DAAQ;QACR,4EAAgC;QAC9B,uEAA6F;QAAC,wEAChG;QAAA,4DAAQ;QAEV,gFAA+G;QAQ/G,gHAMM;QAEN,2EAAyB;QAE+D,oEAAQ;QAAA,4DAAS;QACrG,8EAAsE;QAAjC,0IAAS,YAAQ,IAAC;QAAe,kEAAM;QAAA,4DAAS;;QA5ErF,uFAA0B;QAyDd,2DAAuD;QAAvD,8GAAuD;QACvD,0DAAsD;QAAtD,6GAAsD;QACrD,0DAA0D;QAA1D,iHAA0D;QAC3D,0DAAmD;QAAnD,0GAAmD;QACnD,0DAAsD;QAAtD,6GAAsD;QACtD,0DAAuD;QAAvD,8GAAuD;QACvD,0DAA8D;QAA9D,qHAA8D;QAE5D,0DAAiC;QAAjC,iGAAiC;QAUvC,0DAAgC;QAAhC,6FAAgC;;;;;;;;;;;;;;;;AC/E9C,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,oBAAoB;IACpB,wCAAwC;IACxC,wCAAwC;IACxC,UAAU,EAAE,IAAI;IAChB,MAAM,EAAE,MAAM;IACd,MAAM,EAAE,OAAO;CAChB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;ACpBvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sources":["./src/app/_directives/has-role.directive.ts","./src/app/_forms/date-input/date-input.component.ts","./src/app/_forms/date-input/date-input.component.html","./src/app/_forms/date-picker/date-picker.component.ts","./src/app/_forms/date-picker/date-picker.component.html","./src/app/_forms/text-input/text-input.component.ts","./src/app/_forms/text-input/text-input.component.html","./src/app/_guards/admin.guard.ts","./src/app/_guards/auth.guard.ts","./src/app/_guards/prevent-unsaved-changes.guard.ts","./src/app/_interceptors/error.interceptor.ts","./src/app/_interceptors/jwt.interceptor.ts","./src/app/_interceptors/loading.interceptor.ts","./src/app/_models/pagination.ts","./src/app/_models/userParams.ts","./src/app/_modules/shared.module.ts","./src/app/_resolvers/member-detailed.resolver.ts","./src/app/_services/account.service.ts","./src/app/_services/admin.service.ts","./src/app/_services/busy.service.ts","./src/app/_services/confirm.service.ts","./src/app/_services/members.service.ts","./src/app/_services/message.service.ts","./src/app/_services/paginationHelper.ts","./src/app/_services/presence.service.ts","./src/app/admin/admin-panel/admin-panel.component.ts","./src/app/admin/admin-panel/admin-panel.component.html","./src/app/admin/photo-management/photo-management.component.ts","./src/app/admin/photo-management/photo-management.component.html","./src/app/admin/user-management/user-management.component.ts","./src/app/admin/user-management/user-management.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/errors/not-found/not-found.component.ts","./src/app/errors/not-found/not-found.component.html","./src/app/errors/server-error/server-error.component.ts","./src/app/errors/server-error/server-error.component.html","./src/app/errors/test-errors/test-errors.component.ts","./src/app/errors/test-errors/test-errors.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/lists/lists.component.ts","./src/app/lists/lists.component.html","./src/app/members/member-card/member-card.component.ts","./src/app/members/member-card/member-card.component.html","./src/app/members/member-detail/member-detail.component.ts","./src/app/members/member-detail/member-detail.component.html","./src/app/members/member-edit/member-edit.component.ts","./src/app/members/member-edit/member-edit.component.html","./src/app/members/member-list/member-list.component.ts","./src/app/members/member-list/member-list.component.html","./src/app/members/member-messages/member-messages.component.ts","./src/app/members/member-messages/member-messages.component.html","./src/app/members/photo-editor/photo-editor.component.ts","./src/app/members/photo-editor/photo-editor.component.html","./src/app/messages/messages.component.ts","./src/app/messages/messages.component.html","./src/app/modals/confirm-dialog/confirm-dialog.component.ts","./src/app/modals/confirm-dialog/confirm-dialog.component.html","./src/app/modals/roles-modal/roles-modal.component.ts","./src/app/modals/roles-modal/roles-modal.component.html","./src/app/nav/nav.component.ts","./src/app/nav/nav.component.html","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Directive, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { User } from '../_models/user';\nimport { AccountService } from '../_services/account.service';\nimport { take } from 'rxjs';\n\n@Directive({\n  selector: '[appHasRole]' // *appHasRole='[\"Admin\", \"Thing\"]'\n})\nexport class HasRoleDirective implements OnInit{\n  @Input() appHasRole: string[] = [];\n  user: User = {} as User;\n\n  constructor(private viewContainerRef: ViewContainerRef, private templateRef: TemplateRef<any>,\n    private accountService: AccountService) {\n      this.accountService.currentUser$.pipe(take(1)).subscribe({\n        next: user => {\n          if(user) this.user = user;\n        }\n      })\n     }\n\n  ngOnInit(): void {\n    if (this.user.roles.some(r => this.appHasRole.includes(r))) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainerRef.clear();\n    }\n  }\n\n}\n","import { Component, Input, OnInit, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\n\n@Component({\n  selector: 'app-date-input',\n  templateUrl: './date-input.component.html',\n  styleUrls: ['./date-input.component.css']\n})\nexport class DateInputComponent implements ControlValueAccessor {\n  @Input() label = '';\n  @Input() maxDate: Date | undefined;\n  // Partial means the configurations are optional and we can just specify a few\n  bsConfig: Partial<BsDatepickerConfig> | undefined;\n\n  // @self means dependencies are injected locally and does not try to get this ng control from some place else in the dependency tree\n  constructor(@Self() public  ngControl: NgControl) {\n    this.ngControl.valueAccessor = this;\n    this.bsConfig = {\n      containerClass: 'theme-red',\n      dateInputFormat: 'DD MMMM YYYY'\n    }\n  }\n\n  writeValue(obj: any): void {\n  }\n  registerOnChange(fn: any): void {\n  }\n  registerOnTouched(fn: any): void {\n  }\n\n  get control(): FormControl {\n    return this.ngControl.control as FormControl\n  }\n}\n","<div class=\"d-flex mb-3\">\n  <input \n    type=\"text\"\n    [class.is-invalid]='control.touched && control.invalid'\n    class='form-control'\n    [formControl]='control'\n    placeholder=\"{{label}}\"\n    bsDatepicker\n    [bsConfig]=\"bsConfig\"\n    [maxDate]=\"maxDate\"\n  >\n  <!-- ? is for optional chaining of -->\n  <div *ngIf=\"control.errors?.['required']\" class=\"invalid-feedback\">{{label}} is required</div>\n</div>","import { Component, Input, Self } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\n\n@Component({\n  selector: 'app-date-picker',\n  templateUrl: './date-picker.component.html',\n  styleUrls: ['./date-picker.component.css']\n})\nexport class DatePickerComponent implements ControlValueAccessor {\n  @Input() label = '';\n  @Input() maxDate: Date | undefined;\n  // Partial means the configurations are optional and we can just specify a few\n  bsConfig: Partial<BsDatepickerConfig> | undefined;\n\n  // @self means dependencies are injected locally and does not try to get this ng control from some place else in the dependency tree\n  constructor(@Self() public  ngControl: NgControl) {\n    this.ngControl.valueAccessor = this;\n    this.bsConfig = {\n      containerClass: 'theme-red',\n      dateInputFormat: 'DD/MM/YYYY'\n    }\n  }\n\n  writeValue(obj: any): void {\n  }\n  registerOnChange(fn: any): void {\n  }\n  registerOnTouched(fn: any): void {\n  }\n\n  get control(): FormControl {\n    return this.ngControl.control as FormControl\n  }\n}\n","<div class=\"mb-3\">\n  <input \n    type=\"text\"\n    [class.is-invalid]=\"control.touched && control.invalid\"\n    class=\"form-control\"\n    [formControl]=\"control\"\n    placeholder=\"{{label}}\"\n    bsDatepicker\n    [bsConfig]=\"bsConfig\"\n    [maxDate]=\"maxDate\"\n  >\n  <!-- ? is for optional chaining of -->\n  <div *ngIf=\"control.errors?.['required']\" class=\"invalid-feedback\">{{label}} is required</div>\n</div>","import { Component, Input, Self } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.css']\n})\n\n// ControlValueAccessor is a bridge beween Angular Forms API and a native element in the DOM\nexport class TextInputComponent implements ControlValueAccessor {\n  // added some input properties here:\n  @Input() label : string;\n  @Input() type = 'text';\n\n  // @Self decorator tells angular to keep this self contained and always inject this code here locally into this component\n  constructor(@Self() public ngControl: NgControl) {\n    // this gives us access to our control inside this component when we use it \n    this.ngControl.valueAccessor = this;\n  }\n\n  // the methods will pass thru to the interfaces default methods\n  writeValue(obj: any): void {\n  }\n  registerOnChange(fn: any): void {\n  }\n  registerOnTouched(fn: any): void {\n  }\n\n}\n","<div class=\"mb-3\">\n  <!-- use interpolation to get type from the class -->\n  <input \n    [class.is-invalid]=\"ngControl.touched && ngControl.invalid\"\n    type={{type}}\n    class=\"form-control\" \n    [formControl]=\"ngControl.control\"\n    placeholder={{label}}>\n  <!-- Use ngIf to handle mutliple validation types on this field -->\n  <div *ngIf=\"ngControl.control.errors?.required\" class=\"invalid-feedback\">Please enter a {{label}}</div>\n  <div *ngIf=\"ngControl.control.errors?.minlength\" class=\"invalid-feedback\">{{label}} must be at least {{ngControl.control.errors.minlength['requiredLength']}}</div>\n  <div *ngIf=\"ngControl.control.errors?.maxlenth\" class=\"invalid-feedback\">{{label}} must be at most {{ngControl.control.errors.maxlength['requiredLength']}}</div>\n  <div *ngIf=\"ngControl.control.errors?.isMatching\" class=\"invalid-feedback\">Passwords do not match</div>\n</div>","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, map } from 'rxjs';\nimport { AccountService } from '../_services/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(private accountService: AccountService, private toastr: ToastrService) {}\n  canActivate(): Observable<boolean> {\n    return this.accountService.currentUser$.pipe(\n      map(user => {\n        if (!user) return false;\n        if (user.roles.includes('Admin') ||  user.roles.includes('Moderator')) {\n          return true;\n        } else {\n          this.toastr.error('You cannot enter this area');\n          return false;\n        }\n      })\n    )\n  }\n  \n}\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AccountService } from '../_services/account.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/* The AuthGaurd will automatically susbcribe to all observables. We will use it to observe the AuthService observable */\r\nexport class AuthGuard implements CanActivate {\r\n  // we still do need to inject the AccountService\r\n  constructor(private accountService: AccountService, private toastr: ToastrService) {}\r\n  canActivate(): Observable<boolean> {\r\n    // currentUser$ would return a user, so we need to use a map\r\n    return this.accountService.currentUser$.pipe(\r\n      map(user => {\r\n        if (user) return true;\r\n        this.toastr.error('You shall not pass!');\r\n      })\r\n    ) \r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { MemberEditComponent } from '../members/member-edit/member-edit.component';\r\nimport { ConfirmService } from '../_services/confirm.service';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PreventUnsavedChangesGuard implements CanDeactivate<unknown> {\r\n  constructor(private confirmService: ConfirmService) {}\r\n\r\n  canDeactivate( component: MemberEditComponent ): Observable<boolean> {\r\n    if(component.editForm.dirty) {\r\n      return this.confirmService.confirm()\r\n    }\r\n    return of(true);\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { NavigationExtras, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n// this class will allow us to do some error handling on the front-end and display toastr messages etc.\r\n// this will handle all types of http response errors in one place\r\n\r\n// Injectable status\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  // we also need to provide this interceptor in our app module\r\n\r\n  constructor(private router: Router, private toastr: ToastrService) {}\r\n\r\n  // we can intercept the request, or the response (next)\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    return next.handle(request).pipe(\r\n      catchError(error => {\r\n        if (error) {\r\n          switch (error.status) {\r\n            case 400:\r\n              // this looks weird, but it matches the structure of the object retured in the response \r\n              if (error.error.errors) {\r\n                // validation errors are known as modalStateErrors in ASP.net\r\n                const modalStateErrors = [];\r\n\r\n                // we do this to flatten the array of errors[] we received in the response and push them into an array variable\r\n                for (const key in error.error.errors) {\r\n                  if(error.error.errors[key]) {\r\n                    modalStateErrors.push(error.error.errors[key])\r\n                  }\r\n                }\r\n                throw modalStateErrors.flat();\r\n              } else {\r\n                // this handles a normal 400 response\r\n                this.toastr.error(error.statusText, error.status);\r\n              }\r\n              break;\r\n            case 401:\r\n              this.toastr.error(error.statusText, error.status);\r\n              break;\r\n            case 404:\r\n              this.router.navigateByUrl('/not-found');\r\n              break;\r\n            case 500:\r\n              // use a feature of the router to pass it some states\r\n              const navigationExtras: NavigationExtras = {state: {error: error.error}}\r\n              this.router.navigateByUrl('/server-error', navigationExtras);\r\n              break;\r\n            default:\r\n              this.toastr.error('Something unexpected occurred.');\r\n              console.log(error);\r\n              break;\r\n          }\r\n        }\r\n        // if we dont catch it, we return the error to who ever called it. we should never hit this\r\n        return throwError(error);\r\n      })\r\n    )\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AccountService } from '../_services/account.service';\r\nimport { User } from '../_models/user';\r\nimport { take } from 'rxjs/operators';\r\n\r\n/* purpose of this class is handle the token without having to pass it via our httpOptions with every request made */\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private accountService: AccountService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    let currentUser: User;\r\n\r\n    // using pipe(take(1)) allows us to subscribe, get 1 user, and it will automatically unscubscribe when done, since we are unsure if we need to unsubscribe\r\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => currentUser = user);\r\n\r\n    // clone the above request, and add our authentication header onto it\r\n    if (currentUser) {\r\n      request = request.clone({\r\n        // dont forget the space between Bearer and token\r\n        setHeaders: {\r\n          // the tick marks is a js feature called template literals, it makes it easier to read when strings are made of multiple parts\r\n          Authorization: `Bearer ${currentUser.token}`\r\n        }\r\n      })\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable, identity } from 'rxjs';\r\nimport { BusyService } from '../_services/busy.service';\r\nimport { delay, finalize } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private busyService: BusyService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    this.busyService.busy();  // this should turn on the busy spinner\r\n    return next.handle(request).pipe(   // add a pipe so that we can do some clean up after the request is completed\r\n      \r\n      // don't do the delay in production, identity is used to return an object that does nothing\r\n      (environment.production ? identity : delay(1000)), // temp to delay are system because it is unrealistically fast\r\n      finalize(() => {\r\n        this.busyService.idle(); // make the spinner go away\r\n      })\r\n    )\r\n  }\r\n}\r\n","export interface Pagination {\r\n  currentPage: number;\r\n  itemsPerPage: number;\r\n  totalItems: number;\r\n  totalPages: number;\r\n}\r\n\r\n// type T will effectively be an array of Members (Member[])\r\nexport class PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}","import { User } from \"./user\";\r\n\r\nexport class UserParams {\r\n  // using a class here allows us to have a constructor to init properties when we create it\r\n  gender: string;\r\n  minAge = 18;\r\n  maxAge = 99;\r\n  pageNumber = 1;\r\n  pageSize = 5;\r\n  orderBy = 'lastActive';\r\n\r\n  constructor(user: User) {\r\n    this.gender = user.gender === 'female' ? 'male' : 'female'\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { NgxGalleryModule } from '@kolkov/ngx-gallery';\r\nimport { FileUploadModule } from 'ng2-file-upload';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\r\nimport { TimeagoModule } from 'ngx-timeago';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n\r\n/* ng generate automatically imports the CommonModule. This is fine, every angular module needs this */\r\n// Angular bootstrap modules require specifying for root\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    BsDropdownModule.forRoot(),\r\n    ToastrModule.forRoot({\r\n      positionClass: 'toast-bottom-right'\r\n    }),\r\n    TabsModule.forRoot(),\r\n    NgxGalleryModule,\r\n    NgxSpinnerModule.forRoot({\r\n      type: 'line-scale-party'\r\n    }),\r\n    FileUploadModule,\r\n    BsDatepickerModule.forRoot(),\r\n    PaginationModule.forRoot(),\r\n    ButtonsModule.forRoot(),\r\n    TimeagoModule.forRoot(),\r\n    ModalModule.forRoot()\r\n  ],\r\n  // we have to export modules as well because we are using a 'shared' module\r\n  exports: [\r\n    BsDropdownModule,\r\n    ToastrModule,\r\n    TabsModule,\r\n    NgxGalleryModule,\r\n    NgxSpinnerModule,\r\n    FileUploadModule,\r\n    BsDatepickerModule,\r\n    PaginationModule,\r\n    ButtonsModule,\r\n    TimeagoModule,\r\n    ModalModule\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n","import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { Member } from '../_models/member';\nimport { MembersService } from '../_services/members.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemberDetailedResolver implements Resolve<Member> {\n  constructor(private memberService: MembersService) {}\n\n  resolve(route: ActivatedRouteSnapshot): Observable<Member> {\n    return this.memberService.getMember(route.paramMap.get('username')!);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../_models/user';\r\nimport { PresenceService } from './presence.service';\r\n\r\n/* This decorator means our service can be injected into components or other services in our application */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/* this will be used to make requests to our API */\r\nexport class AccountService {\r\n  baseUrl = environment.apiUrl;\r\n  private currentUserSource = new ReplaySubject<User>(1); // 1 means we get the last 1 user, so this will be the size of the buffer\r\n  currentUser$ = this.currentUserSource.asObservable(); // by convention, we add $ to end of observable name\r\n\r\n  /* inject the httpClient into our account service.\r\n    Services are singlestons, so the data persists until the application is closed.\r\n    Components are destroyed as soon as they are not in use, or we move to another component */\r\n  \r\n    // this is also a good place to establish the presenceService because we want to maintain the connection from the moment\r\n    // we sign on.\r\n  constructor(private http: HttpClient, private presenceService: PresenceService) { }\r\n\r\n  /* login() is going to receive the login credentials from our navbar login form */\r\n  // tslint:disable-next-line: typedef\r\n  login(model: User) {\r\n    /* because this is a post request, we are required to include a body, so we send our model as the body */\r\n    /* anything in the pipe() is rxjs operator */\r\n    return this.http.post(this.baseUrl + 'account/login', model).pipe(\r\n      // since we are subscribing in our nav component, this map will run when we login, and populate user in local storage\r\n      map((response: any) => {\r\n        const user = response;\r\n        if (user) {\r\n          this.setCurrentUser(user);\r\n        }\r\n      })\r\n    )\r\n  }\r\n\r\n  register(model: any) {\r\n    return this.http.post(this.baseUrl + 'account/register', model).pipe(\r\n      map((user: User) => {\r\n        if (user) {\r\n          this.setCurrentUser(user);\r\n        }\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  /* helper method */\r\n  setCurrentUser(user: User) {\r\n    user.roles = [];\r\n    const roles = this.getDecodedToken(user.token).role;\r\n    Array.isArray(roles) ? user.roles = roles : user.roles.push(roles);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    this.currentUserSource.next(user); // this is how you set the next value in the ReplaySubject\r\n\r\n    // this is for our SignalR connection\r\n    this.presenceService.createHubConnection(user);\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n    this.currentUserSource.next(null);\r\n    this.presenceService.stopHubConnection();\r\n  }\r\n\r\n  getDecodedToken(token: string) {\r\n    // splitting on '.' and getting 2nd element removes the algorithm info at begining of token, and the signature info at the end of the token.\r\n    return JSON.parse(atob(token.split('.')[1]));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../_models/user';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  baseUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  getUsersWithRoles() {\n    return this.http.get<User[]>(this.baseUrl + 'admin/users-with-roles');\n  }\n\n  updateUserRoles(username: string, roles: string[] ) {\n    return this.http.post<string[]>(this.baseUrl + 'admin/edit-roles/' + username + '?roles=' + roles, {});\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BusyService {\r\n  // multiple requests at a time, we will increment and decrement as they come in\r\n  busyRequestCount = 0;\r\n\r\n  constructor(private spinnerService: NgxSpinnerService) { }\r\n\r\n  busy(): void {\r\n    this.busyRequestCount++;\r\n    this.spinnerService.show(undefined, {\r\n      type: 'line-scale-party',\r\n      bdColor: 'rgba(255, 255, 255, 0)',\r\n      color: '#333333'\r\n    });\r\n  }\r\n\r\n  idle(): void {\r\n    this.busyRequestCount--;\r\n    if (this.busyRequestCount <= 0) {\r\n      this.busyRequestCount = 0;\r\n      this.spinnerService.hide();\r\n    }  \r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { ConfirmDialogComponent } from '../modals/confirm-dialog/confirm-dialog.component';\nimport { Observable, map } from 'rxjs';\n\n// This is a re-usable confirmation pop service that can be used anywhere by overriding the properties\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmService {\n  bsModalRef?: BsModalRef<ConfirmDialogComponent>;\n\n  constructor(private modalService: BsModalService) { }\n\n  confirm(\n    title = 'Confirmation',\n    message = 'Are you sure you want to do this?',\n    btnOkText = 'Ok',\n    btnCancelText = 'Cancel'\n  ): Observable<boolean> {\n    const config = {\n      initialState: {\n        title,\n        message,\n        btnOkText,\n        btnCancelText\n      }\n    }\n    this.bsModalRef = this.modalService.show(ConfirmDialogComponent, config);\n    return this.bsModalRef.onHidden?.pipe(\n      map(() => {\n        return this.bsModalRef?.content?.result\n      })\n    )\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Member } from 'src/app/_models/member';\r\nimport { of } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { UserParams } from '../_models/userParams';\r\nimport { AccountService } from './account.service';\r\nimport { User } from '../_models/user';\r\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\r\n\r\n/* This is no longer needed, because we now attach authorization headers via jwt.interceptor.ts\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    // ? is the optional chaining operator becuase we can't guarantee that we have the token in storage\r\n    Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('user'))?.token\r\n  })\r\n} */\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MembersService {\r\n  baseUrl = environment.apiUrl;\r\n\r\n  // because services are singletons, they persist until the application is done\r\n  // this makes them a good candidate for state management, we could use Redux, or Mobex but that is overkill\r\n  // for this application\r\n  members: Member[] = []; // this is used to reduce calls to the API\r\n  memberCache = new Map(); // using a Map allows us to use get and set to store query results in cache\r\n  user: User | undefined;\r\n  userParams: UserParams | undefined;\r\n\r\n  // because its a service that is going to make http requests to our API, bring in the http client\r\n  // because we need access to the user, inject the AccountService.\r\n  // Its ok to inject services into other services so long as you do not create a circular reference\r\n  constructor(private http: HttpClient, private accountService: AccountService) {\r\n    this.accountService.currentUser$.pipe(take(1)).subscribe({\r\n      next: user => {\r\n        if (user) {\r\n          this.userParams = new UserParams(user);\r\n          this.user = user;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /* we can user these get/set helper methods inside our components */\r\n\r\n  getUserParams() {\r\n    return this.userParams;\r\n  }\r\n\r\n  setUserParams(params: UserParams) {\r\n    this.userParams = params;\r\n  }\r\n\r\n  resetUserParams() {\r\n    if (this.user) {\r\n      // this clears our the userParams by setting it equal to a new object\r\n      this.userParams = new UserParams(this.user);\r\n      return this.userParams;\r\n    }\r\n    return;\r\n  }\r\n\r\n  // this is old method that checks cache, before we had pagination\r\n  /*getMembers(): Observable<Member[]> {\r\n    // check if we already have the members loaded before call to API\r\n    if (this.members.length > 0) return of(this.members); // \"of\" will return something as an observable\r\n\r\n    return this.http.get<Member[]>(this.baseUrl + 'users').pipe(\r\n      map(members => {\r\n        this.members = members; // save the members the first time we try to get them\r\n        return members; // map already returns things as observables\r\n      })\r\n    )\r\n  }*/\r\n\r\n  getMembers(userParams: UserParams) {\r\n    // use a string of the userParams separated by - as the key store query results in cache\r\n    const response = this.memberCache.get(Object.values(userParams).join('-'));\r\n\r\n    if (response) return of(response);\r\n\r\n    let params = getPaginationHeaders(userParams.pageNumber, userParams.pageSize);\r\n\r\n    params = params.append('minAge', userParams.minAge.toString());\r\n    params = params.append('maxAge', userParams.maxAge.toString());\r\n    params = params.append('gender', userParams.gender.toString());\r\n    params = params.append('orderBy', userParams.orderBy.toString());\r\n    \r\n    // use a pipe() save the query results in cache using params string as the key, after the query is made to the API\r\n    return getPaginatedResult<Member[]>(this.baseUrl + 'users', params, this.http).pipe(\r\n      map(response => { \r\n        this.memberCache.set(Object.values(userParams).join('-'), response);\r\n        return response;\r\n      })\r\n    )\r\n  }\r\n\r\n  \r\n\r\n  getMember(username: string) {\r\n\r\n    // reduce the various arrays of members into a single array, then search for the username in the cache\r\n    const member = [...this.memberCache.values()]\r\n      .reduce((arr, elem) => arr.concat(elem.result), [])\r\n      .find((member: Member) => member.username === username);\r\n\r\n    // if we find the member in the cache, then use that\r\n    if (member) return of(member);\r\n\r\n    // otherwise we need to make a call to the api to get the user\r\n    return this.http.get<Member>(this.baseUrl + 'users/' + username);\r\n  }\r\n\r\n  setMainPhoto(photoId: number) {\r\n    return this.http.put(this.baseUrl + 'users/set-main-photo/' + photoId, {});\r\n  }\r\n\r\n  updateMember(member: Member) {\r\n    return this.http.put(this.baseUrl + 'users', member).pipe(\r\n      map(() => {\r\n        const index = this.members.indexOf(member);\r\n        this.members[index] = member;  // update the member in our member array\r\n      }\r\n      )\r\n    );\r\n  }\r\n\r\n  deletePhoto(photoId: number) {\r\n    return this.http.delete(this.baseUrl + 'users/delete-photo/' + photoId);\r\n  }\r\n\r\n  addLike(username: string) {\r\n    //for post, just pass empty object {}\r\n    return this.http.post(this.baseUrl + 'likes/' + username, {});\r\n  }\r\n\r\n  getLikes(predicate: string, pageNumber: number, pageSize: number) {\r\n    let params = getPaginationHeaders(pageNumber, pageSize);\r\n\r\n    params = params.append('predicate', predicate);\r\n\r\n    return getPaginatedResult<Member[]>(this.baseUrl + 'likes', params, this.http);\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Message } from '../_models/message';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\nimport { User } from '../_models/user';\nimport { BehaviorSubject, take } from 'rxjs';\nimport { Group } from '../_models/group';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  baseUrl = environment.apiUrl;\n  hubUrl = environment.hubUrl;\n  private hubConnection?: HubConnection;\n  private messageThreadSource = new BehaviorSubject<Message[]>([]);\n  messageThread$ = this.messageThreadSource.asObservable();\n\n  // inject httpClient\n  constructor(private http: HttpClient) { }\n\n  createHubConnection(user: User, otherUsername: string) {\n    // 'message' hub name defined in program.cs in the API\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n        accessTokenFactory: () => user.token\n      })\n      .withAutomaticReconnect()\n      .build();\n\n      this.hubConnection.start().catch(error => console.log(error));\n\n      this.hubConnection.on('ReceiveMessageThread', messages => {   \n        this.messageThreadSource.next(messages);\n      })\n\n      this.hubConnection.on('UpdatedGroup', (group: Group) => {\n        // here we are going to see if there are any messages to the user that just joined the group that are marked as unread.\n        // if so, we will mark them as read in our client to match how they are in the server\n        if (group.connections.some(x => x.username === otherUsername)) {\n          this.messageThread$.pipe(take(1)).subscribe({\n            next: messages => {\n              messages.forEach(message => {\n                if (!message.dateRead) {\n                  message.dateRead = new Date(Date.now())\n                }\n              })\n              // use the ... spread operator to replace the array with our updated version of the array\n              this.messageThreadSource.next([...messages]);\n            }\n          })\n        }\n      })\n\n      this.hubConnection.on('NewMessage', message => {\n        this.messageThread$.pipe(take(1)).subscribe({\n          next: messages => {\n            this.messageThreadSource.next([...messages, message])\n          }\n        })\n      })\n  }\n\n  stopHubConnection() {\n    if (this.hubConnection) {\n      this.hubConnection.stop();\n    }\n  }\n\n  getMessages(pageNumber: number, pageSize: number, container: string) {\n    let params = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('Container', container);\n    return getPaginatedResult<Message[]>(this.baseUrl + 'messages', params, this.http);\n\n  }\n\n  getMessageThread(username: string) {\n    return this.http.get<Message[]>(this.baseUrl + 'messages/thread/' + username);\n  }\n\n  // async forces promise to be returned from this method\n  async sendMessage(username: string, content: string) {\n    // we no longer use http post, we will use our message hub\n    //return this.http.post<Message>(this.baseUrl + 'messages', {recipientUsername: username, content});\n\n    // invokes a message on our server. SendMessage defined MessageHub\n    return this.hubConnection?.invoke('SendMessage', {recipientUsername: username, content})\n      .catch(error => console.log(error));\n  }\n\n  deleteMessage(id: number) {\n    return this.http.delete(this.baseUrl + 'messages/' + id);\n  }\n}\n","import { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { PaginatedResult } from \"../_models/pagination\";\r\n\r\n// these 2 helper methods could be used for other services, but would probably need to be moved into their own file\r\nexport function getPaginatedResult<T>(url: string, params: HttpParams, http: HttpClient) {\r\n  const paginatedResult: PaginatedResult<T> = new PaginatedResult<T>();\r\n  return http.get<T>(url, { observe: 'response', params }).pipe(\r\n    map(response => {\r\n      // our Members array will be contained in response.body\r\n      if (response.body) {\r\n        paginatedResult.result = response.body;\r\n      }\r\n      const pagination = response.headers.get('Pagination');\r\n      //if (response.headers.get('Pagination') !== null) {\r\n      if (pagination) {\r\n        paginatedResult.pagination = JSON.parse(pagination);\r\n      }\r\n      return paginatedResult;\r\n    })\r\n  );\r\n}\r\n\r\nexport function getPaginationHeaders(pageNumber: number, pageSize: number) {\r\n  let params = new HttpParams();\r\n\r\n  params = params.append('pageNumber', pageNumber.toString());\r\n  params = params.append('pageSize', pageSize.toString());\r\n\r\n  return params;\r\n}","import { Injectable } from '@angular/core';\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\nimport { ToastrService } from 'ngx-toastr';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../_models/user';\nimport { BehaviorSubject, take } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PresenceService {\n  hubUrl = environment.hubUrl;\n  private hubConnection?:HubConnection;\n\n  // this is so we can subscribe to the presence tracker\n  private onlineUsersSource = new BehaviorSubject<string[]>([]);\n  onlineUsers$ = this.onlineUsersSource.asObservable();\n\n  // router is needed to route user to message tab if they tap on the message received toastr\n  constructor(private toastr: ToastrService, private router: Router) { }\n\n  createHubConnection(user: User) {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(this.hubUrl + 'presence', {\n        accessTokenFactory: () => user.token\n      })\n      .withAutomaticReconnect()\n      .build();\n\n    this.hubConnection.start().catch(error => console.log(error));\n\n    // has to match the name of the method on the server\n    this.hubConnection.on('UserIsOnline', username=> {\n      // instead of mutating the array, will creat a new one and replace it\n      this.onlineUsers$.pipe(take(1)).subscribe({\n        next: usernames => this.onlineUsersSource.next([...usernames, username])\n      })\n    })\n\n    this.hubConnection.on('UserIsOffline', username=> {\n      // this creates a new array by filtering out the username from the existing, then replacing the entire array\n      this.onlineUsers$.pipe(take(1)).subscribe({\n        next: usernames => this.onlineUsersSource.next(usernames.filter(x => x !== username))\n      })\n    })\n\n    this.hubConnection.on('GetOnlineUsers', usernames => {\n      this.onlineUsersSource.next(usernames); \n    })\n\n    // this message will be called by the message hub to send users a notification\n    this.hubConnection.on('NewMessageReceived', ({username, knownAs}) => {\n      this.toastr.info(knownAs + ' has sent you a new message! Click me to see it')\n        .onTap\n        .pipe(take(1))\n        .subscribe({\n          next: () => this.router.navigateByUrl('/members/' + username + '?tab=Messages')\n        })\n    })\n  }\n\n  stopHubConnection() {\n    this.hubConnection?.stop().catch(error => console.log(error));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-panel',\n  templateUrl: './admin-panel.component.html',\n  styleUrls: ['./admin-panel.component.css']\n})\nexport class AdminPanelComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>Admin Panel</h2>\n<div class=\"tab-panel\">\n  <tabset class=\"member-tabset\">\n    <tab heading=\"User management\" *appHasRole=\"['Admin']\">\n      <div class=\"container\">\n        <app-user-management></app-user-management>\n      </div>\n    </tab>\n    <tab heading=\"Photo management\" *appHasRole=\"['Admin', 'Moderator']\">\n      <div class=\"container\">\n        <app-photo-management></app-photo-management>\n      </div>\n    </tab>  \n  </tabset>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-photo-management',\n  templateUrl: './photo-management.component.html',\n  styleUrls: ['./photo-management.component.css']\n})\nexport class PhotoManagementComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>photo-management works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { User } from 'src/app/_models/user';\nimport { AdminService } from 'src/app/_services/admin.service';\nimport { RolesModalComponent } from 'src/app/modals/roles-modal/roles-modal.component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n \n@Component({\n  selector: 'app-user-management',\n  templateUrl: './user-management.component.html',\n  styleUrls: ['./user-management.component.css']\n})\nexport class UserManagementComponent implements OnInit {\n  users: User[] = [];\n  bsModalRef: BsModalRef<RolesModalComponent> = new BsModalRef<RolesModalComponent>();\n\n  availableRoles = [\n    'Admin',\n    'Moderator',\n    'Member'\n  ]\n\n  constructor(private adminService: AdminService, private modalService: BsModalService) {\n  }\n\n  ngOnInit(): void {\n    this.getUsersWithRoles();\n  }\n\n  getUsersWithRoles() {\n    this.adminService.getUsersWithRoles().subscribe({\n      next: users => this.users = users\n    })\n  }\n\n  openRolesModal(user: User) {\n    const config = {\n      class: 'modal-dialog-centered',\n      initialState: {\n        username: user.username,\n        availableRoles: this.availableRoles,\n        selectedRoles: [...user.roles]\n      }\n    }\n    this.bsModalRef = this.modalService.show(RolesModalComponent, config);\n    this.bsModalRef.onHide?.subscribe({\n      next: () => {\n        const selectedRoles = this.bsModalRef.content?.selectedRoles;\n        if (!this.arrayEqual(selectedRoles!, user.roles)) {\n          // now we make a call to our API\n          this.adminService.updateUserRoles(user.username, selectedRoles!).subscribe({\n            next: roles => user.roles = roles\n          })\n        }\n      }\n    })\n  }\n\n  private arrayEqual(arr1: any[], arr2: any[]) {\n    return JSON.stringify(arr1.sort()) === JSON.stringify(arr2.sort());\n  }\n\n}\n","<div class=\"row\">\n  <table class=\"table\">\n    <thead>\n      <tr>  \n        <th style=\"width: 30%;\">Username</th>\n        <th style=\"width: 40%;\">Active Roles</th>\n        <th style=\"width: 30%;\"></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let user of users\">\n        <td>{{user.username}}</td>\n        <td>{{user.roles}}</td>\n        <td><button (click)=\"openRolesModal(user)\" class=\"btn btn-info\">Edit Roles</button></td>\n      </tr>\n    </tbody>\n  </table>\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\r\nimport { ServerErrorComponent } from './errors/server-error/server-error.component';\r\nimport { TestErrorsComponent } from './errors/test-errors/test-errors.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ListsComponent } from './lists/lists.component';\r\nimport { MemberDetailComponent } from './members/member-detail/member-detail.component';\r\nimport { MemberEditComponent } from './members/member-edit/member-edit.component';\r\nimport { MemberListComponent } from './members/member-list/member-list.component';\r\nimport { MessagesComponent } from './messages/messages.component';\r\nimport { AuthGuard } from './_guards/auth.guard';\r\nimport { PreventUnsavedChangesGuard } from './_guards/prevent-unsaved-changes.guard';\r\nimport { MemberDetailedResolver } from './_resolvers/member-detailed.resolver';\r\nimport { AdminPanelComponent } from './admin/admin-panel/admin-panel.component';\r\nimport { AdminGuard } from './_guards/admin.guard';\r\n\r\n/* we will use this array to tell angular about the routes we created */\r\nconst routes: Routes = [\r\n  {path: '', component: HomeComponent},\r\n  {\r\n    path: '',\r\n    runGuardsAndResolvers: 'always',\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      {path: 'members', component: MemberListComponent},\r\n      // resolver will get the propery we need from our route, instead of our memberDetailService\r\n      {path: 'members/:username', component: MemberDetailComponent, resolve: {member: MemberDetailedResolver}},\r\n      {path: 'member/edit', component: MemberEditComponent, canDeactivate: [PreventUnsavedChangesGuard]},\r\n      {path: 'lists', component: ListsComponent},\r\n      {path: 'messages', component: MessagesComponent},\r\n      {path: 'admin', component: AdminPanelComponent, canActivate: [AdminGuard]}\r\n    ]\r\n  },\r\n  {path: 'errors', component: TestErrorsComponent},\r\n  {path: 'not-found', component: NotFoundComponent},\r\n  {path: 'server-error', component: ServerErrorComponent},\r\n  {path: '**', component: NotFoundComponent, pathMatch: 'full'},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { User } from './_models/user';\r\nimport { AccountService } from './_services/account.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n/* this is our base component */\r\nexport class AppComponent implements OnInit {\r\n  title = 'The Dating app';\r\n  users: any;\r\n\r\n  constructor(private accountService: AccountService){}\r\n\r\n  ngOnInit() {\r\n    this.setCurrentUser();\r\n  }\r\n\r\n  setCurrentUser() {\r\n    const userstring = localStorage.getItem('user');\r\n\r\n    if (!userstring) return;\r\n\r\n    // because we stringified the object in local source, we must parse it here\r\n    const user: User = JSON.parse(userstring);\r\n\r\n    // here we make the effort to get the user token from local storage then setting it in our account service, to make the user login persistent on page refresh. \r\n    this.accountService.setCurrentUser(user);\r\n  }\r\n\r\n}\r\n","<ngx-spinner type=\"ball-scale-multiple\">\r\n    <h3>Loading...</h3>\r\n</ngx-spinner>\r\n\r\n<app-nav></app-nav>\r\n\r\n<div class=\"container\" style=\"margin-top:100px;\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NavComponent } from './nav/nav.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { MemberListComponent } from './members/member-list/member-list.component';\r\nimport { MemberDetailComponent } from './members/member-detail/member-detail.component';\r\nimport { ListsComponent } from './lists/lists.component';\r\nimport { MessagesComponent } from './messages/messages.component';\r\nimport { SharedModule } from './_modules/shared.module';\r\nimport { TestErrorsComponent } from './errors/test-errors/test-errors.component';\r\nimport { ErrorInterceptor } from './_interceptors/error.interceptor';\r\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\r\nimport { ServerErrorComponent } from './errors/server-error/server-error.component';\r\nimport { MemberCardComponent } from './members/member-card/member-card.component';\r\nimport { JwtInterceptor } from './_interceptors/jwt.interceptor';\r\nimport { MemberEditComponent } from './members/member-edit/member-edit.component';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport { LoadingInterceptor } from './_interceptors/loading.interceptor';\r\nimport { PhotoEditorComponent } from './members/photo-editor/photo-editor.component';\r\nimport { TextInputComponent } from './_forms/text-input/text-input.component';\nimport { DateInputComponent } from './_forms/date-input/date-input.component';\nimport { MemberMessagesComponent } from './members/member-messages/member-messages.component';\nimport { DatePickerComponent } from './_forms/date-picker/date-picker.component';\nimport { AdminPanelComponent } from './admin/admin-panel/admin-panel.component';\nimport { HasRoleDirective } from './_directives/has-role.directive';\nimport { UserManagementComponent } from './admin/user-management/user-management.component';\nimport { PhotoManagementComponent } from './admin/photo-management/photo-management.component';\nimport { RolesModalComponent } from './modals/roles-modal/roles-modal.component';\nimport { ConfirmDialogComponent } from './modals/confirm-dialog/confirm-dialog.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavComponent,\r\n    HomeComponent,\r\n    RegisterComponent,\r\n    MemberListComponent,\r\n    MemberDetailComponent,\r\n    ListsComponent,\r\n    MessagesComponent,\r\n    TestErrorsComponent,\r\n    NotFoundComponent,\r\n    ServerErrorComponent,\r\n    MemberCardComponent,\r\n    MemberEditComponent,\r\n    PhotoEditorComponent,\r\n    TextInputComponent,\r\n    DateInputComponent,\r\n    MemberMessagesComponent,\r\n    DatePickerComponent,\r\n    AdminPanelComponent,\r\n    HasRoleDirective,\r\n    UserManagementComponent,\r\n    PhotoManagementComponent,\r\n    RolesModalComponent,\r\n    ConfirmDialogComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    NgxSpinnerModule,\r\n  ],\r\n  providers: [\r\n    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true},\r\n    {provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true},\r\n    {provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true}\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.component.html',\r\n  styleUrls: ['./not-found.component.css']\r\n})\r\nexport class NotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"containter\">\r\n    <h1>Not found</h1>\r\n    <button class=\"btn btn-info btn-lg\" routerLink='/'>Return to home page</button>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-server-error',\r\n  templateUrl: './server-error.component.html',\r\n  styleUrls: ['./server-error.component.css']\r\n})\r\nexport class ServerErrorComponent implements OnInit {\r\n  error: any;\r\n\r\n  /* we can only access the Router state in the constructor */\r\n  constructor(private router: Router) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    // be safe with navigation because we only get this once when the user navigates, it gets cleared if they refresh page\r\n    // the ? is called optional chaining. checks if it exists before proceeding\r\n    this.error = navigation?.extras?.state?.error;\r\n   }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h4>Internal server error - refreshing the page will make the error disappear</h4>\r\n<ng-container *ngIf=\"error\">\r\n    <h5 class='text-danger'>Error: {{error.message}}</h5>\r\n    <p class='font-weight-bold'>Note: If you are seeing this then Angular is probably not to blame</p>\r\n    <p>What to do next?</p>\r\n    <ol>\r\n        <li>Open the chrome </li>\r\n        <li>Inspect the network tab</li>\r\n        <li>Check the failing request</li>\r\n        <li>Examine the request URL - make sure it is correct</li>\r\n        <li>Reproduce the error in Postman - if we see the same respnse, then the issue is not with Angular.</li>\r\n    </ol>\r\n    <p>Following is the stack trace - this is where your investigation should start</p>\r\n    <!-- spit out the stack trace from the response into the browser -->\r\n    <code class='mt-5' style='background-color: whitesmoke;'>{{error.details}}</code>\r\n</ng-container>","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-test-errors',\r\n  templateUrl: './test-errors.component.html',\r\n  styleUrls: ['./test-errors.component.css']\r\n})\r\nexport class TestErrorsComponent implements OnInit {\r\n\r\n  baseUrl = environment.apiUrl; // we get the url from environment, instead of hardcoding it in our application\r\n  validationErrors: string[] = [];\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  get404Error() {\r\n    this.http.get(this.baseUrl + 'buggy/not-found').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  get400Error() {\r\n    this.http.get(this.baseUrl + 'buggy/bad-request').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  get500Error() {\r\n    this.http.get(this.baseUrl + 'buggy/server-error').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  get401Error() {\r\n    this.http.get(this.baseUrl + 'buggy/auth').subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  get400ValidationError() {\r\n    // send an empty object {} to get the validation error\r\n    this.http.post(this.baseUrl + 'account/register', {}).subscribe(response => {\r\n      console.log(response);\r\n    }, error => {\r\n      console.log(error);\r\n      // get the array of strings returned in the response so they can be displayed in the browser\r\n      this.validationErrors = error;\r\n    })\r\n  }\r\n\r\n}\r\n","<ng-container>\r\n    <button (click)=\"get500Error()\" class=\"btn btn-outline-primary me-3\">Test 500 Error</button>\r\n    <button (click)=\"get400Error()\" class=\"btn btn-outline-primary me-3\">Test 400 Error</button>\r\n    <button (click)=\"get401Error()\" class=\"btn btn-outline-primary me-3\">Test 401 Error</button>\r\n    <button (click)=\"get404Error()\" class=\"btn btn-outline-primary me-3\">Test 404 Error</button>\r\n    <button (click)=\"get400ValidationError()\" class=\"btn btn-outline-primary me-3\">Test 400 Validation Error</button>\r\n    \r\n    <!-- this will display the list of errors returned in the response-->\r\n    <div class=\"row mt-5\" *ngIf=\"validationErrors.length > 0\">\r\n        <ul class=\"text-danger\">\r\n            <li *ngFor=\"let error of validationErrors\">\r\n                {{error}}\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</ng-container>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\n/* will be responsible for passing data down to the register componenet */\r\nexport class HomeComponent implements OnInit {\r\n  registerMode = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  registerToggle() {\r\n    this.registerMode = !this.registerMode;\r\n  }\r\n\r\n  cancelRegisterMode(event: boolean) {\r\n    this.registerMode = event;\r\n  }\r\n\r\n}\r\n","<div class=\"container mt-5\">\r\n    <div  *ngIf=\"!registerMode\" style=\"text-align: center;\">\r\n        <h1>Find your match</h1>\r\n        <p class=\"lead\">\r\n            Come on in to find your matches... all you need to do is sign up!\r\n        </p>\r\n        <div class=\"text-center\">\r\n            <button (click)=\"registerToggle()\" class=\"btn btn-primary btn-lrg me-2\">Register</button>\r\n            <button class=\"btn btn-info btn-lrg\">Learn more</button>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"registerMode\" class=\"container\">\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-4\">\r\n                <!-- usersFromHomeComponent is defined in the register.component, users is defined in home.compnent.\r\n                    [] recieve data, () send data -->\r\n                <app-register (cancelRegister)=\"cancelRegisterMode($event)\"></app-register>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Member } from '../_models/member';\r\nimport { Pagination } from '../_models/pagination';\r\nimport { MembersService } from '../_services/members.service';\r\n\r\n@Component({\r\n  selector: 'app-lists',\r\n  templateUrl: './lists.component.html',\r\n  styleUrls: ['./lists.component.css']\r\n})\r\nexport class ListsComponent implements OnInit {\r\n  members: Member[] | undefined;\r\n  predicate = 'liked';\r\n  pageNumber = 1;\r\n  pageSize = 5;\r\n  pagination: Pagination | undefined;\r\n\r\n  constructor(private memberService: MembersService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadLikes();\r\n  }\r\n\r\n  loadLikes() {\r\n    this.memberService.getLikes(this.predicate, this.pageNumber, this.pageSize).subscribe({\r\n      next: response => {\r\n        this.members = response.result;\r\n        this.pagination = response.pagination;\r\n      }\r\n    })\r\n  }\r\n\r\n  pageChanged(event: any) {\r\n    if (this.pageNumber !==event.page) {\r\n      this.pageNumber = event.page;\r\n      this.loadLikes();\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"text-center mt-3\">\r\n  <h2>{{predicate === 'liked' ? 'Members I Like' : 'Members who like me'}}</h2>\r\n</div>\r\n\r\n<div class=\"container mt-3\">\r\n  <div class=\"d-flex\">\r\n    <div class=\"btn-group\" name=\"predicate\">\r\n      <button class=\"btn btn-primary\" \r\n        btnRadio=\"liked\"\r\n        [(ngModel)]=\"predicate\"\r\n        (click)=\"loadLikes()\">Members I like</button>\r\n      <button class=\"btn btn-primary\" \r\n        btnRadio=\"likedBy\"\r\n        [(ngModel)]=\"predicate\"\r\n        (click)=\"loadLikes()\">Members who like me</button>\r\n    </div>\r\n  </div>\r\n  <div class=\"d-flex mt-3\">\r\n    <div class=\"col-2\" *ngFor=\"let member of members\">\r\n      <app-member-card [member]=\"member\"></app-member-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"d-flex justify-content-center\" *ngIf=\"pagination\">\r\n  <pagination\r\n    [boundaryLinks]=\"true\"\r\n    [totalItems]=\"pagination.totalItems\"\r\n    [itemsPerPage]=\"pagination.itemsPerPage\"\r\n    [(ngModel)]=\"pagination.currentPage\"\r\n    (pageChanged)=\"pageChanged($event)\"\r\n    previousText=\"&lsaquo;\"\r\n    nextText=\"&rsaquo;\"\r\n    firstText=\"&laquo;\"\r\n    lastText=\"&raquo;\">\r\n  </pagination>\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Member } from 'src/app/_models/member';\r\nimport { MembersService } from 'src/app/_services/members.service';\r\nimport { PresenceService } from 'src/app/_services/presence.service';\r\n\r\n@Component({\r\n  selector: 'app-member-card',\r\n  templateUrl: './member-card.component.html',\r\n  styleUrls: ['./member-card.component.css']\r\n})\r\nexport class MemberCardComponent implements OnInit {\r\n  // add an input property because we are receiving this data from parent object (member-list)\r\n  @Input() member: Member;\r\n\r\n  // inject needed services here\r\n  constructor(private memberService: MembersService, private toastr: ToastrService, public presenceService: PresenceService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  addLike(member: Member) {\r\n    this.memberService.addLike(member.username).subscribe({\r\n      next: () => this.toastr.success('You have liked ' + member.knownAs)\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"card mb-4\">\r\n    <div class=\"card-img-wrapper\">\r\n        <img src=\"{{member.photoUrl || './assets/user.png'}}\" alt=\"{{member.knownAs}}\" class=\"card-img-top\">\r\n        <ul class=\"list-inline member-icons animate text-center\">\r\n            <li class=\"list-inline-item\">\r\n              <button routerLink='/members/{{member.username}}' class=\"btn btn-primary\"><i class=\"fa fa-user\"></i></button>\r\n            </li>\r\n            <li class=\"list-inline-item\">\r\n              <button (click)=\"addLike(member)\" class=\"btn btn-primary\"><i class=\"fa fa-heart\"></i></button>\r\n            </li>\r\n            <li class=\"list-inline-item\">\r\n              <button\r\n                routerLink=\"/members/{{member.username}}\"\r\n                [queryParams]=\"{tab: 'Messages'}\"\r\n                class=\"btn btn-primary\"><i class=\"fa fa-envelope\"></i></button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"card-body p-1\">\r\n        <h6 class=\"card-title text-center mb-1\">\r\n          <span [class.is-online]=\"(presenceService.onlineUsers$ | async)?.includes(member.username)\">\r\n            <i class=\"fa fa-user me-2\"></i>\r\n          </span>\r\n          {{member.knownAs}}, {{member.age}}\r\n        </h6>\r\n        <p class=\"card-text text-muted text-center\">{{member.city}}</p>\r\n    </div>\r\n</div>","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgxGalleryAnimation, NgxGalleryImage, NgxGalleryOptions } from '@kolkov/ngx-gallery';\r\nimport { TabDirective, TabsetComponent } from 'ngx-bootstrap/tabs';\r\nimport { take } from 'rxjs';\r\nimport { Member } from 'src/app/_models/member';\r\nimport { Message } from 'src/app/_models/message';\r\nimport { User } from 'src/app/_models/user';\r\nimport { AccountService } from 'src/app/_services/account.service';\r\nimport { MessageService } from 'src/app/_services/message.service';\r\nimport { PresenceService } from 'src/app/_services/presence.service';\r\n\r\n@Component({\r\n  selector: 'app-member-detail',\r\n  templateUrl: './member-detail.component.html',\r\n  styleUrls: ['./member-detail.component.css']\r\n})\r\nexport class MemberDetailComponent implements OnInit, OnDestroy {\r\n  // we dont have access to this memberTabs view child until AFTER the component is constructed because it is dynamic.\r\n  // add static: true to resolve this, along with using routeResolver\r\n  @ViewChild('memberTabs', {static: true}) memberTabs?: TabsetComponent;\r\n  member: Member =  {} as Member; // workaround, set member to an empty object if does not exist\r\n  galleryOptions: NgxGalleryOptions[];\r\n  galleryImages: NgxGalleryImage[];\r\n  activeTab?: TabDirective;\r\n  messages: Message[] = [];\r\n  user?: User;\r\n\r\n  constructor(private accountService: AccountService, private route: ActivatedRoute, private messageService: MessageService,\r\n    public presenceService: PresenceService, private router: Router) { \r\n      this.accountService.currentUser$.pipe(take(1)).subscribe({\r\n        next: user => {\r\n          if (user) this.user = user;\r\n        }\r\n      });\r\n      \r\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // this.loadMember(); // we no longer get member from the memberService, we will get it from our Route\r\n    this.route.data.subscribe({\r\n      next: data => this.member = data['member']\r\n    })\r\n\r\n    // this returns an observable, so we must subscribe to it\r\n    this.route.queryParams.subscribe({\r\n      next: params => {\r\n        params['tab'] && this.selectTab(params['tab'])\r\n      }\r\n    })\r\n\r\n    this.galleryOptions = [\r\n      {\r\n        width: '500px',\r\n        height: '500px',\r\n        imagePercent: 100,\r\n        thumbnailsColumns: 4,\r\n        imageAnimation: NgxGalleryAnimation.Slide,\r\n        preview: false\r\n      }\r\n    ]\r\n\r\n    this.galleryImages = this.getImages();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.messageService.stopHubConnection();\r\n  }\r\n\r\n  getImages(): NgxGalleryImage[] {\r\n    const imageUrls = [];\r\n    for (const photo of this.member.photos) {\r\n      imageUrls.push({\r\n        small: photo?.url,\r\n        medium: photo?.url,\r\n        big: photo?.url\r\n      })\r\n    }\r\n    return imageUrls;\r\n  }\r\n\r\n  // we dont use this method anymore, because we are getting the member from the route, before whatever element is constructed\r\n  /*loadMember() {\r\n    this.memberService.getMember(this.route.snapshot.paramMap.get('username')).subscribe(member => {\r\n      this.member = member;\r\n\r\n      // get images now that we actaully have the member\r\n      this.galleryImages = this.getImages();\r\n    })\r\n  }*/\r\n\r\n  selectTab(heading: string) {\r\n    if(this.memberTabs) {\r\n      this.memberTabs.tabs.find(x => x.heading === heading)!.active = true;\r\n    }\r\n  }\r\n\r\n  loadMessages() {\r\n    if (this.member) {\r\n      // the tutorial named this userName, but i called it username\r\n      this.messageService.getMessageThread(this.member.username).subscribe({\r\n        next: messages => this.messages = messages\r\n      })\r\n    }\r\n  }\r\n\r\n  onTabActivated(data: TabDirective) {\r\n    this.activeTab = data;\r\n    if (this.activeTab.heading === 'Messages' && this.user) {\r\n      this.messageService.createHubConnection(this.user, this.member.username);\r\n    } else {\r\n      this.messageService.stopHubConnection();\r\n    }\r\n  }\r\n\r\n}\r\n","\r\n<!-- ngIf=\"member\" is a conditional to check that member exists before it tries to display it\r\n     this template page gets generated before the API returns our member -->\r\n<div class=\"row\">\r\n    <div class=\"col-4\">\r\n        <div class=\"card\">\r\n            <img src=\"{{member.photoUrl || './assets/user.png'}} \" alt=\"{{member.knownAs}}\" \r\n                class=\"card-img-top img-thumbnail\">\r\n            <div class=\"card-body\">\r\n                <div class=\"mb-2\" *ngIf=\"(presenceService.onlineUsers$ | async)?.includes(member.username)\">\r\n                  <i class=\"fa fa-user-circle text-success\"></i> Online now\r\n                </div>\r\n                <div>\r\n                    <strong>Location:</strong>\r\n                    <p>{{member.city}}, {{member.country}}</p>\r\n                </div>\r\n                <div>\r\n                    <strong>Age:</strong>\r\n                    <p>{{member.age}}</p>\r\n                </div>\r\n                <div>\r\n                    <strong>Last Active:</strong>\r\n                    <p>{{member.lastActive | timeago}}</p>\r\n                </div>\r\n                <div>\r\n                    <strong>Member since:</strong>\r\n                    <p>{{member.created | date : \"longDate\"}}</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-footer\">\r\n                <div class=\"btn-group d-flex\">\r\n                    <button class=\"btn btn-primary\">Like</button>\r\n                    <button (click)=\"selectTab('Messages')\" class=\"btn btn-success\">Message</button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"col-8\">\r\n        <!-- tabset is an example of an ngx module that has not turned off css encapsulatiuon. they encapsulate their own styles.\r\n        in order to apply our own styings we must add our own class attribute -->\r\n        <!-- #memberTabs is a template reference variable so that we can access this tabset -->\r\n        <tabset class=\"member-tabset\" #memberTabs>\r\n            <!-- use the onTabActivated method we created in our component, selectTab is a method provided from tabset -->\r\n            <tab heading='About {{member.knownAs}}' (selectTab)=\"onTabActivated($event)\">\r\n                <h4>Description</h4>\r\n                <p>{{member.introduction}}</p>\r\n                <h4>Looking for</h4>\r\n                <p>{{member.lookingFor}}</p>\r\n            </tab>\r\n            <tab heading='Interests' (selectTab)=\"onTabActivated($event)\">\r\n                <h4>Interests</h4>\r\n                <p>{{member.interests}}</p>\r\n            </tab>\r\n            <tab heading='Photos' (selectTab)=\"onTabActivated($event)\">\r\n                <h4>Photos</h4>\r\n                <ngx-gallery [options]=\"galleryOptions\" [images]=\"galleryImages\" \r\n                    style=\"display: inline-block; margin-bottom: 20px;\"></ngx-gallery>\r\n            </tab>\r\n            <tab heading='Messages' (selectTab)=\"onTabActivated($event)\">\r\n                <app-member-messages [username]=\"member.username\"></app-member-messages>\r\n            </tab>\r\n        </tabset>\r\n    </div>\r\n</div>","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { take } from 'rxjs/operators';\r\nimport { Member } from 'src/app/_models/member';\r\nimport { User } from 'src/app/_models/user';\r\nimport { AccountService } from 'src/app/_services/account.service';\r\nimport { MembersService } from 'src/app/_services/members.service';\r\n\r\n@Component({\r\n  selector: 'app-member-edit',\r\n  templateUrl: './member-edit.component.html',\r\n  styleUrls: ['./member-edit.component.css']\r\n})\r\nexport class MemberEditComponent implements OnInit {\r\n  @ViewChild('editForm') editForm: NgForm; // this gives us access to the editForm element from the html template\r\n  member: Member;\r\n  user: User;\r\n  @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n    // HostListener used to show message before navigating away in browser\r\n    if (this.editForm.dirty) {\r\n      $event.returnValue = true;\r\n    }\r\n  }\r\n\r\n  constructor(private accountService: AccountService, private memberService: MembersService, private toastr: ToastrService) {\r\n    // we need to get the user out of the observable. we will end up with the current user form accountService\r\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => this.user = user);\r\n  }\r\n   \r\n\r\n  ngOnInit(): void {\r\n    this.loadMember();\r\n  }\r\n\r\n  loadMember() {\r\n    this.memberService.getMember(this.user.username).subscribe(member => {\r\n      this.member = member;\r\n    })\r\n  }\r\n\r\n  updateMember() {\r\n    this.memberService.updateMember(this.member).subscribe(() => {\r\n      this.toastr.success('Profile Updated Successfully');\r\n\r\n      // we get editForm from the html template so that after updating the profile, we can reset the state of the form\r\n      // (so its not \"dirty\"), but we need to pass it this.member which is the updated member, so that the values will\r\n      // be the updated ones. this will disable submit button and clear message\r\n      this.editForm.reset(this.member);\r\n    })\r\n    \r\n  }\r\n\r\n}\r\n","\r\n<!-- ngIf=\"member\" is a conditional to check that member exists before it tries to display it\r\n     this template page gets generated before the API returns our member -->\r\n    <div class=\"row\" *ngIf=\"member\">\r\n        <div class=\"col-4\">\r\n            <h1>Your profile</h1>\r\n        </div>\r\n        <div class=\"col-8\">\r\n            <div class=\"alert alert-info\" *ngIf=\"editForm.dirty\">\r\n                <strong>Information: </strong>You have made changes. Any unsaved changes will be lost.\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-4\">\r\n            <div class=\"card\">\r\n                <img src=\"{{member.photoUrl || './assets/user.png'}} \" alt=\"{{member.knownAs}}\" \r\n                    class=\"card-img-top img-thumbnail\">\r\n                <div class=\"card-body\">\r\n                    <div>\r\n                        <strong>Location:</strong>\r\n                        <p>{{member.city}}, {{member.country}}</p>\r\n                    </div>\r\n                    <div>\r\n                        <strong>Age:</strong>\r\n                        <p>{{member.age}}</p>\r\n                    </div>\r\n                    <div>\r\n                        <strong>Last Active:</strong>\r\n                        <p>{{member.lastActive | timeago}}</p>\r\n                    </div>\r\n                    <div>\r\n                        <strong>Member since:</strong>\r\n                        <p>{{member.created | date : \"longDate\"}}</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    <!-- btn-block class makes button take up 100% width -->\r\n                    <button [disabled]=\"!editForm.dirty\" form=\"editForm\" type=\"submit\" class=\"btn btn-success btn-block\">Save Changes</button>\r\n                </div>\r\n    \r\n            </div>\r\n        </div>\r\n    \r\n        <div class=\"col-8\">\r\n            <!-- tabset is an example of an ngx module that has not turned off css encapsulatiuon. they encapsulate their own styles.\r\n            in order to apply our own styings we must add our own class attribute -->\r\n            <tabset class=\"member-tabset\">\r\n                <tab heading='About {{member.knownAs}}'>\r\n                    <form #editForm=\"ngForm\" id=\"editForm\" (ngSubmit)=\"updateMember()\">\r\n                        <!-- ngModel gives us the binding, but the name property must also match the member property we are looking for -->\r\n                        <h4>Description</h4>\r\n                        <textarea class=\"form-control\" [(ngModel)]=\"member.introduction\" name=\"introduction\" rows=\"6\"></textarea>\r\n                        <h4 class=\"mt-2\">Looking for</h4>\r\n                        <textarea  class=\"form-control\" [(ngModel)]=\"member.lookingFor\" name=\"lookingFor\" rows=\"6\"></textarea>\r\n                        <h4 class=\"mt-2\">Interests</h4>\r\n                        <textarea  class=\"form-control\" [(ngModel)]=\"member.interests\" name=\"interests\" rows=\"6\"></textarea>\r\n                        <h4 class=\"mt-2\">Location Details:</h4>\r\n                        <div class=\"d-flex\">\r\n                            <label for=\"city\">City: </label>\r\n                            <input [(ngModel)]=\"member.city\" type=\"text\" name=\"city\" class=\"form-control mx-2\">\r\n                            <label for=\"country\">Country: </label>\r\n                            <input [(ngModel)]=\"member.country\" type=\"text\" name=\"country\" class=\"form-control mx-2\">\r\n                        </div>\r\n                    </form>\r\n                    \r\n                </tab>\r\n                <tab heading='Edit Photos'>\r\n                    <app-photo-editor [member]=\"member\"></app-photo-editor>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>","import { Component, OnInit } from '@angular/core';\r\nimport { Member } from 'src/app/_models/member';\r\nimport { Pagination } from 'src/app/_models/pagination';\r\nimport { UserParams } from 'src/app/_models/userParams';\r\nimport { MembersService } from 'src/app/_services/members.service';\r\n\r\n@Component({\r\n  selector: 'app-member-list',\r\n  templateUrl: './member-list.component.html',\r\n  styleUrls: ['./member-list.component.css']\r\n})\r\nexport class MemberListComponent implements OnInit {\r\n  //members$: Observable<Member[]>; // the $ is a convention to denote Observable variable. not using this after adding pagination\r\n  members: Member[];\r\n  pagination: Pagination | undefined;\r\n  userParams: UserParams | undefined;\r\n  genderList = [{value: 'male', display: 'Males'}, {value: 'female', display: 'Females'}]\r\n\r\n  // we're injecting our accountService beacuse we need access to the user\r\n  constructor(private memberService: MembersService) { \r\n    this.userParams = this.memberService.getUserParams();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadMembers();\r\n    // we will now do it this way, part of reducing API calls. now this is the old way.\r\n    // this.members$ = this.memberService.getMembers();\r\n  }\r\n\r\n  // this method has no error handling because we let the error.interceptor handle it\r\n  // Also we will no longer use this method, because we will save members in memory to avoid uneccessary API calls\r\n  /*loadMembers() {\r\n    this.memberService.getMembers().subscribe(members => {\r\n      this.members = members;\r\n    })\r\n  }*/\r\n\r\n  loadMembers() {\r\n    // we dont need the pipe in subscribe to take 1, http requests typically return\r\n    if (this.userParams) {\r\n      this.memberService.setUserParams(this.userParams);\r\n      this.memberService.getMembers(this.userParams).subscribe({\r\n        next: response => {\r\n          if (response.result && response.pagination) {\r\n            this.members = response.result;\r\n            this.pagination = response.pagination;\r\n          }\r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  // this will allow user to reset their gender prefs\r\n  resetFilters() {\r\n    this.userParams = this.memberService.resetUserParams();\r\n    this.loadMembers();\r\n  }\r\n\r\n  pageChanged(event: any) {\r\n    if (this.userParams && this.userParams?.pageNumber !==event.page) {\r\n      this.userParams.pageNumber = event.page;\r\n      // take this opportunity to update the memberService as well, so queries will be stored\r\n      this.memberService.setUserParams(this.userParams);\r\n      this.loadMembers();\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"text-center mt-3\">\r\n  <h2>Your matches - {{pagination?.totalItems}} found</h2>\r\n</div>\r\n\r\n<div class=\"container mt-3\" *ngIf=\"userParams\">\r\n  <form #form=\"ngForm\" class=\"d-flex mb-3\" (ngSubmit)=\"loadMembers()\" autocomplete=\"off\">\r\n\r\n    <div class=\"d-flex mx-2\">\r\n      <label class=\"col-form-label\">Age from: </label>\r\n      <input type=\"number\" class=\"form-control ms-1\" style=\"width: 70px\" name=\"minAge\" [(ngModel)]=\"userParams.minAge\">\r\n    </div>\r\n\r\n    <div class=\"d-flex mx-2\">\r\n      <label class=\"col-form-label\">Age to: </label>\r\n      <input type=\"number\" class=\"form-control ms-1\" style=\"width: 70px\" name=\"maxAge\" [(ngModel)]=\"userParams.maxAge\">\r\n    </div>\r\n\r\n    <div class=\"d-flex px-2\">\r\n      <label class=\"col-form-label me-2\">Show: </label>\r\n      <select name=\"gender\" style=\"width: 150px\" class=\"form-select ms-1\" [(ngModel)]=\"userParams.gender\">\r\n        <option *ngFor=\"let gender of genderList\" [value]=\"gender.value\">{{gender.display}}</option>\r\n      </select>\r\n    </div>\r\n\r\n    <button class=\"btn btn-primary ms-1\" type=\"submit\">Apply Filters</button>\r\n    <button (click)=\"resetFilters()\" class=\"btn btn-primary ms-1\" type=\"submit\">Reset Filters</button>\r\n\r\n    <div class=\"col\">\r\n      <div class=\"btn-group float-end\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          name=\"orderBy\"\r\n          [(ngModel)]=\"userParams.orderBy\"\r\n          btnRadio=\"lastActive\"\r\n          (click)=\"loadMembers()\">Last Active</button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          name=\"orderBy\"\r\n          [(ngModel)]=\"userParams.orderBy\"\r\n          btnRadio=\"created\"\r\n          (click)=\"loadMembers()\">Newest Members</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div *ngFor=\"let member of members\" class=\"col-2\">\r\n        <app-member-card [member]=\"member\"></app-member-card>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"d-flex justify-content-center\" *ngIf=\"pagination\">\r\n  <pagination\r\n    [boundaryLinks]=\"true\"\r\n    [totalItems]=\"pagination.totalItems\"\r\n    [itemsPerPage]=\"pagination.itemsPerPage\"\r\n    [(ngModel)]=\"pagination.currentPage\"\r\n    (pageChanged)=\"pageChanged($event)\"\r\n    previousText=\"&lsaquo;\"\r\n    nextText=\"&rsaquo;\"\r\n    firstText=\"&laquo;\"\r\n    lastText=\"&raquo;\">\r\n  </pagination>\r\n</div>","import { ChangeDetectionStrategy, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MessageService } from 'src/app/_services/message.service';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-member-messages',\n  templateUrl: './member-messages.component.html',\n  styleUrls: ['./member-messages.component.css']\n})\nexport class MemberMessagesComponent implements OnInit {\n  @ViewChild('messageForm') messageForm?: NgForm // this is needed so we can clear out the form after the message is sent\n  @Input() username?: string;\n  \n  // messages is a property that we will pass down, in memmmber-detail.componenet.html  we use [messages]\n  // we no longer use this, because we are using messageHub\n  //@Input() messages: Message[] = [];\n  \n  messageContent = '';\n\n  constructor(public messageService: MessageService) { }\n\n  ngOnInit(): void {\n  }\n\n  sendMessage() {\n    if (!this.username) return;\n\n    // because we are returning a promise, we can use \"then\" instead of \"subscribe\"\n    // we dont need to do anything with the message we get back, our messageTHread observable handles that\n    // we just need to reset the form\n    this.messageService.sendMessage(this.username, this.messageContent).then(() => {\n      this.messageForm?.reset();\n    })\n  }\n\n}\n","<div class=\"card\">\n  <div class=\"card-body\">\n    <div *ngIf=\"(messageService.messageThread$ | async)?.length === 0\">\n      No messages yet...  say hi by using the message box below\n    </div>\n    <!-- #scrollMe is a templage variable. the goal here is to get Angular to scroll the content for us -->\n    <ul\n      #scrollMe\n      style=\"overflow: scroll; height: 500px\"\n      [scrollTop]=\"scrollMe.scrollHeight\" \n      *ngIf=\"(messageService.messageThread$ | async)!.length > 0\" class=\"chat\">\n      <li *ngFor=\"let message of (messageService.messageThread$ | async)\">\n        <div>\n          <span class=\"class-img float-end\">\n            <img src=\"{{message.senderPhotoUrl || './assets/user.png'}}\" alt=\"image of user\" class=\"rounded-circle\">\n          </span>\n          <div class=\"chat-body\">\n            <div class=\"header\">\n              <small class=\"text-muted\">\n                <span class=\"fa fa-clock-o\">{{message.messageSent | timeago}}</span>\n                <span class=\"text-danger\" *ngIf=\"!message.dateRead && message.senderUsername !== username\">(unread)</span>\n                <span class=\"text-success\" *ngIf=\"message.dateRead && message.senderUsername !== username\">(read {{message.dateRead | timeago}})</span>\n              </small>\n            </div>\n            <p>{{message.content}}</p>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"card-footer\">\n    <form #messageForm=\"ngForm\" (ngSubmit)=\"sendMessage()\" autocomplete=\"off\">\n      <div class=\"input-group\">\n        <input name=\"messageContent\"\n               required\n               [(ngModel)]=\"messageContent\"\n               type=\"text\" \n               class=\"form-control input-sm\" \n               placeholder=\"Send a private message\">\n        <div class=\"input-group-append\">\n          <button [disabled]=\"!messageForm.valid\" class=\"btn btn-primary\" type=\"submit\">Send</button>\n        </div>  \n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FileUploader, FileUploadModule } from 'ng2-file-upload';\r\nimport { take } from 'rxjs/operators';\r\nimport { Member } from 'src/app/_models/member';\r\nimport { Photo } from 'src/app/_models/photo';\r\nimport { User } from 'src/app/_models/user';\r\nimport { AccountService } from 'src/app/_services/account.service';\r\nimport { MembersService } from 'src/app/_services/members.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-photo-editor',\r\n  templateUrl: './photo-editor.component.html',\r\n  styleUrls: ['./photo-editor.component.css']\r\n})\r\nexport class PhotoEditorComponent implements OnInit {\r\n  @Input() member: Member;\r\n\r\n  // this is the ng2-file-upload module we got from valor \r\n  uploader: FileUploader;\r\n  hasBaseDropzoneOver = false;\r\n  baseUrl = environment.apiUrl;\r\n  user: User;\r\n\r\n  constructor(private accountService: AccountService, private memberService: MembersService) {\r\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => this.user = user);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeUploader();\r\n  }\r\n\r\n  // need this method so we can set our dropzone inside the template. e is an event\r\n  fileOverBase(e: any) {\r\n    this.hasBaseDropzoneOver = e;\r\n  }\r\n\r\n  setMainPhoto(photo: Photo) {\r\n    this.memberService.setMainPhoto(photo.id).subscribe(() => {\r\n      this.user.photoUrl = photo.url;\r\n      this.accountService.setCurrentUser(this.user); // this updates the user observable and also the photo in local storage\r\n      this.member.photoUrl = photo.url;\r\n      // go through all the members photos and look for the id, then set to isMain\r\n      this.member.photos.forEach(p => {\r\n        if (p.isMain) p.isMain = false;\r\n        if (p.id === photo.id) p.isMain = true;\r\n      })\r\n    })\r\n  }\r\n\r\n  deletePhoto(photoId: number) {\r\n    this.memberService.deletePhoto(photoId).subscribe(() => {\r\n      // returns an array of all the photos with id not equal to photoId\r\n      this.member.photos = this.member.photos.filter(x => x.id !== photoId);\r\n      // deletePhoto does not allow us to delete main photo, and interceptors handle all the errors\r\n    })\r\n  }\r\n\r\n  // use Bearer token to send our credentials with this file\r\n  initializeUploader() {\r\n    this.uploader = new FileUploader({\r\n      url: this.baseUrl + 'users/add-photo',\r\n      authToken: 'Bearer ' + this.user.token,\r\n      isHTML5: true,\r\n      allowedFileType: ['image'],\r\n      removeAfterUpload: true,\r\n      autoUpload: false,\r\n      maxFileSize: 10 * 1024 * 1024\r\n    });\r\n\r\n    this.uploader.onAfterAddingFile = (file) => {\r\n      file.withCredentials = false;\r\n    }\r\n\r\n    this.uploader.onSuccessItem = (item, response, status, headers) => {\r\n      if (response) {\r\n        const photo: Photo = JSON.parse(response);\r\n        this.member.photos.push(photo);\r\n        if (photo.isMain) {\r\n          // this will update the image everywhere\r\n          this.user.photoUrl = photo.url;\r\n          this.member.photoUrl = photo.url;\r\n          this.accountService.setCurrentUser(this.user);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-2\" *ngFor=\"let photo of member.photos\">\r\n    <img src=\"{{photo.url}}\" alt=\"{{photo.url}}\" class=\"img-thumbnail p-1\">\r\n    <div class=\"text-center\">\r\n      <button\r\n        [disabled]=\"photo.isMain\"\r\n        (click)=\"setMainPhoto(photo)\"\r\n        [ngClass]='photo.isMain ? \"btn-success active\" : \"btn-outline-success\"'\r\n        class=\"btn btn-sm\"\r\n      >Main</button>\r\n      <button\r\n        [disabled]=\"photo.isMain\"\r\n        (click)=\"deletePhoto(photo.id)\"\r\n        class=\"btn btn-sm btn-danger\"\r\n      ><i class=\"fa fa-trash\"></i></button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row mt-3\">\r\n  <div class=\"col-md-3\">\r\n      <h3>Add Photos</h3>\r\n      <div ng2FileDrop\r\n           [ngClass]=\"{'nv-file-over': hasBaseDropzoneOver}\"\r\n           (fileOver)=\"fileOverBase($event)\"\r\n           [uploader]=\"uploader\"\r\n           class=\"card bg-faded p-3 text-center mb-3 my-drop-zone\">\r\n           <i class=\"fa fa-upload fa-3x\"></i>\r\n          Drop photos here\r\n      </div>\r\n      \r\n      Multiple\r\n      <input type=\"file\" ng2FileSelect [uploader]=\"uploader\" multiple  /><br/>\r\n      Single\r\n      <input type=\"file\" ng2FileSelect [uploader]=\"uploader\" />\r\n  </div>\r\n  <!-- Only display this if we have an image using ngIf-->\r\n  <div class=\"col-md-9\" style=\"margin-bottom: 40px\" *ngIf=\"uploader?.queue?.length\">\r\n      <h3>Upload queue</h3>\r\n      <p>Queue length: {{ uploader?.queue?.length }}</p>\r\n      <table class=\"table\">\r\n          <thead>\r\n          <tr>\r\n              <th width=\"50%\">Name</th>\r\n              <th>Size</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr *ngFor=\"let item of uploader.queue\">\r\n              <td><strong>{{ item?.file?.name }}</strong></td>\r\n              <td *ngIf=\"uploader.options.isHTML5\" nowrap>{{ item?.file?.size/1024/1024 | number:'.2' }} MB</td>\r\n          </tr>\r\n          </tbody>\r\n      </table>\r\n\r\n      <div>\r\n          <div>\r\n              Queue progress:\r\n              <div class=\"progress\">\r\n                  <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': uploader.progress + '%' }\"></div>\r\n              </div>\r\n          </div>\r\n          <!-- This actually adds the photo to cloudinary -->\r\n          <button type=\"button\" class=\"btn btn-success btn-s\"\r\n                  (click)=\"uploader.uploadAll()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\r\n              <span class=\"fa fa-upload\"></span> Upload all\r\n          </button>\r\n          <button type=\"button\" class=\"btn btn-warning btn-s\"\r\n                  (click)=\"uploader.cancelAll()\" [disabled]=\"!uploader.isUploading\">\r\n              <span class=\"fa fa-ban\"></span> Cancel all\r\n          </button>\r\n          <button type=\"button\" class=\"btn btn-danger btn-s\"\r\n                  (click)=\"uploader.clearQueue()\" [disabled]=\"!uploader.queue.length\">\r\n              <span class=\"fa fa-trash\"></span> Remove all\r\n          </button>\r\n      </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Message } from '../_models/message';\r\nimport { Pagination } from '../_models/pagination';\r\nimport { MessageService } from '../_services/message.service';\r\n\r\n@Component({\r\n  selector: 'app-messages',\r\n  templateUrl: './messages.component.html',\r\n  styleUrls: ['./messages.component.css']\r\n})\r\nexport class MessagesComponent implements OnInit {\r\n  messages?: Message[];\r\n  pagination?: Pagination;\r\n  container = 'Unread';\r\n  pageNumber = 1;\r\n  pageSize = 5;\r\n  loading = false; \r\n\r\n  constructor(private messageService: MessageService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadMessages();\r\n  }\r\n\r\n  loadMessages() {\r\n    this.loading = true; \r\n    this.messageService.getMessages(this.pageNumber, this.pageSize, this.container).subscribe({\r\n      next: response => {\r\n        this.messages = response.result;\r\n        this.pagination = response.pagination;\r\n        this.loading = false; // notice this only happens after the api returns a response\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteMessage(id: number) {\r\n    this.messageService.deleteMessage(id).subscribe({\r\n      next: () => this.messages?.splice(this.messages.findIndex(m => m.id === id), 1)\r\n\r\n    })\r\n  }\r\n\r\n  pageChanged(event: any) {\r\n    if (this.pageNumber != event.page) {\r\n      this.pageNumber = event.page;\r\n      this.loadMessages();\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"mb-4 d-flex\">\r\n  <div class=\"btn-group\" name=\"container\">\r\n    <button class=\"btn btn-primary\" \r\n            btnRadio=\"Unread\"\r\n            [(ngModel)]=\"container\"\r\n            (click)=\"loadMessages()\" \r\n    >\r\n      <i class=\"fa fa-envelope\"></i>Unread      \r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" \r\n            btnRadio=\"Inbox\"\r\n            [(ngModel)]=\"container\"\r\n            (click)=\"loadMessages()\" \r\n    >\r\n      <i class=\"fa fa-envelope-open\"></i>Inbox      \r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" \r\n            btnRadio=\"Outbox\"\r\n            [(ngModel)]=\"container\"\r\n            (click)=\"loadMessages()\" \r\n    >\r\n      <i class=\"fa fa-paper-plane\"></i>Outbox      \r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\" *ngIf=\"!messages || messages.length === 0\">\r\n  <h3>No Messages</h3>\r\n</div>\r\n\r\n<div class=\"row\" *ngIf=\"messages && messages.length > 0\">\r\n  <table class=\"table table-hover\" style=\"cursor: pointer;\">\r\n    <thead>\r\n      <tr>\r\n        <th style=\"width: 40%\">Message</th>\r\n        <th style=\"width: 20%\">From / To</th>\r\n        <th style=\"width: 20%\">Sent /Received</th>\r\n        <th style=\"width: 20%\">Message</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody class=\"align-middle\">\r\n      <tr [hidden]=\"loading\" *ngFor=\"let message of messages\"\r\n          routerLink=\"{{container === 'Outbox'\r\n            ? '/members/' + message.recipientUsername\r\n            : '/members/' + message.senderUsername}}\"\r\n          [queryParams]=\"{tab: 'Messages'}\"\r\n      >\r\n        <td>{{message.content}}</td>\r\n        <td>\r\n          <div *ngIf=\"container === 'Outbox'\">\r\n            <img class=\"img-circle rounded-circle me-2\" src=\"{{message.recipientPhotoUrl || './assets/user.png'}}\" alt=\"recipient photo\">\r\n            <strong>{{message.recipientUsername | titlecase}}</strong>\r\n          </div>\r\n          <div *ngIf=\"container !== 'Outbox'\">\r\n            <img class=\"img-circle rounded-circle me-2\" src=\"{{message.senderPhotoUrl || './assets/user.png'}}\" alt=\"recipient photo\">\r\n            <strong>{{message.senderUsername | titlecase}}</strong>\r\n          </div>\r\n        </td>\r\n        <td>{{message.messageSent | timeago}}</td>\r\n        <td>\r\n          <button (click)=\"$event.stopPropagation()\" (click)=\"deleteMessage(message.id)\" class=\"btn btn-danger\">Delete</button>\r\n        </td>\r\n\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<div class=\"d-flex justify-content-center\" *ngIf=\"!loading && pagination && messages && messages.length > 0\">\r\n  <pagination\r\n    [boundaryLinks]=\"true\"\r\n    [totalItems]=\"pagination.totalItems\"\r\n    [itemsPerPage]=\"pagination.itemsPerPage\"\r\n    [(ngModel)]=\"pagination.currentPage\"\r\n    (pageChanged)=\"pageChanged($event)\"\r\n    previousText=\"&lsaquo;\"\r\n    nextText=\"&rsaquo;\"\r\n    firstText=\"&laquo;\"\r\n    lastText=\"&raquo;\">\r\n  </pagination>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.css']\n})\nexport class ConfirmDialogComponent implements OnInit {\n  title = '';\n  message = '';\n  btnOkText = '';\n  btnCancelText = '';\n  result = false;\n\n  constructor(public bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n  }\n\n  confirm() {\n    this.result = true;\n    this.bsModalRef.hide();\n  }\n\n  decline() {\n    this.bsModalRef.hide();\n  }\n\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title pull-left\">{{title}}</h4>\n</div>\n<div class=\"modal-body\">\n  <p>{{message}}</p>\n</div>\n<div class=\"modal-footer\">\n  <button class=\"btn btn-success\" (click)=\"confirm()\">{{btnOkText}}</button>\n  <button class=\"btn btn-danger\" (click)=\"decline()\">{{btnCancelText}}</button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-roles-modal',\n  templateUrl: './roles-modal.component.html',\n  styleUrls: ['./roles-modal.component.css']\n})\nexport class RolesModalComponent implements OnInit {\n  username = '';\n  availableRoles: any[] = [];\n  selectedRoles: any[] = [];\n\n  constructor(public bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n  }\n\n  updateChecked(checkedValue: string) {\n    const index = this.selectedRoles.indexOf(checkedValue);\n\n    // i think this removes the role if it exists, otherwise it pushes the role\n    index !== -1 ? this.selectedRoles.splice(index, 1) : this.selectedRoles.push(checkedValue);\n  }\n\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title pull-left\">Edit Roles for {{username}}</h4>\n  <button type=\"button\" class=\"btn-close close pull-right\" aria-label=\"Close\" (click)=\"bsModalRef.hide()\">\n    <span aria-hidden=\"true\" class=\"visually-hidden\">&times;</span>\n  </button>\n</div>\n<div class=\"modal-body\">\n  <form #rolesForm=\"ngForm\" id=\"rolesForm\">\n    <div class=\"form-check\" *ngFor=\"let role of availableRoles\">\n      <!-- do not allow Admin user to remove Admin role from themself -->\n      <input type=\"checkbox\"\n        class=\"form-check-input\"\n        [checked]=\"selectedRoles.includes(role)\"\n        value=\"role\"\n        (change)=\"updateChecked(role)\"\n        [disabled]=\"role === 'Admin' && username === 'Admin'\">\n      <label>{{role}}</label>\n    </div>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">Submit</button>\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AccountService } from '../_services/account.service';\r\n\r\n@Component({\r\n  selector: 'app-nav',\r\n  templateUrl: './nav.component.html',\r\n  styleUrls: ['./nav.component.css']\r\n})\r\nexport class NavComponent implements OnInit {\r\n  model: any = {}\r\n\r\n  // accountService is public so that we can access it in the html template, even though nav.component.html is associated with this object\r\n  // inject Router so we can route to a url via code\r\n  constructor(public accountService: AccountService, private router: Router,\r\n              private toastr: ToastrService) {}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  // tslint:disable-next-line: typedef\r\n  login() {\r\n    this.accountService.login(this.model).subscribe({\r\n      next: _ => {\r\n        this.router.navigateByUrl('/members');\r\n        this.model = {}; // this sets model to empty object, so it clears out the username/password in the nav bar\r\n      }\r\n    })\r\n  }\r\n\r\n  logout() {\r\n    this.accountService.logout(); // call our accountService's logout method\r\n    this.router.navigateByUrl('/'); // send back to homepage after logging out\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-primary\">\r\n    <div class=\"container\">\r\n        <a class=\"navbar-brand\" routerLink='/' routerLinkActive='active'>Dating App</a>\r\n        <ul class=\"navbar-nav me-auto\">\r\n            <ng-container *ngIf=\"accountService.currentUser$ | async\">\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" routerLink='/members'\r\n                      [routerLinkActiveOptions]=\"{exact: true}\" \r\n                      routerLinkActive='active'>Matches</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" routerLink='/lists' routerLinkActive='active'>Lists</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" routerLink='/messages' routerLinkActive='active'>Messages</a>\r\n                </li>\r\n                <li *appHasRole=\"['Admin', 'Moderator']\" class=\"nav-item\">\r\n                  <a class=\"nav-link\" routerLink='/admin' routerLinkActive='active'>Admin</a>\r\n                </li>\r\n            </ng-container>\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link\" routerLink='/errors' routerLinkActive='active'>Errors</a>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\"dropdown\" *ngIf=\"(accountService.currentUser$ | async) as user\" dropdown> <!-- dropdown Angular directive. use \"as user\" to make use of the username in the display below -->\r\n            <img src=\"{{user.photoUrl || './assets/user.png'}}\" alt=\"{{user.username}}\">\r\n            <a class=\"dropdown-toggle text-light ms-2 text-decoration-none\" dropdownToggle>Welcome {{user.knownAs | titlecase}}</a> <!-- dropdownToggle Angular directive. Angular | to display titlecase-->\r\n            <div class=\"dropdown-menu mt-2\" *dropdownMenu>  <!-- *dropdownToggle is a structural directive -->\r\n                <a routerLink=\"/member/edit\" class=\"dropdown-item\">Edit Profile</a>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <a class=\"dropdown-item\" (click)=\"logout()\">Logout</a>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- when submit button is clicked, the ngSubmit function will be called -->\r\n        <form *ngIf=\"(accountService.currentUser$ | async) === null\" #loginForm=\"ngForm\" class=\"d-flex mt-2 mt-md-0\" (ngSubmit)=\"login()\">\r\n            <input\r\n                name=\"username\" \r\n                [(ngModel)]=\"model.username\"\r\n                class=\"form-control me-sm-2\"\r\n                type=\"text\"\r\n                placeholder=\"Username\">\r\n            <input \r\n                name=\"password\"\r\n                [(ngModel)]=\"model.password\"\r\n                class=\"form-control me-sm-2\"\r\n                type=\"password\"\r\n                placeholder=\"Password\">\r\n            <button class=\"btn btn-success my-2 my-sm-0\" type=\"submit\">Login</button>\r\n        </form>      \r\n    </div>\r\n\r\n  </nav>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { AbstractControl, UntypedFormBuilder, FormControl, UntypedFormGroup, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AccountService } from '../_services/account.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  @Output() cancelRegister = new EventEmitter();\r\n  //model: any = {}; // we're not using model property, because we use registerForm now.\r\n  registerForm: UntypedFormGroup; // provided by angular forms, we will use it for Reactive forms\r\n  maxDate: Date = new Date();\r\n  validationErrors: string[] = []; // initialize array to empty array because we check the length for error messages\r\n\r\n  // inject the accountService into this component\r\n  constructor(private accountService: AccountService, private toastr: ToastrService, private fb: UntypedFormBuilder, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n    // insure user cannot enter a date more than 18 years ago\r\n    this.maxDate.setFullYear(this.maxDate.getFullYear() -18);\r\n  }\r\n\r\n  initializeForm() {\r\n    // using formBuilder here simplifies our code a bit instead of specifying formBuilder for each input\r\n    this.registerForm = this.fb.group({\r\n      gender: ['female'],\r\n      username: ['', Validators.required],\r\n      knownAs: ['', Validators.required],\r\n      dateOfBirth: ['', Validators.required],\r\n      city: ['', Validators.required],\r\n      country: ['', Validators.required],\r\n      password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]],\r\n      confirmPassword: ['', [Validators.required, this.matchValues('password')]]\r\n    })\r\n\r\n    // all of this below is so that changing the password after confirming it will not stay validated\r\n    this.registerForm.controls.password.valueChanges.subscribe(() => {\r\n      this.registerForm.controls.confirmPassword.updateValueAndValidity();\r\n    })\r\n  }\r\n\r\n  // create our own custom validator function\r\n  matchValues(matchTo: string): ValidatorFn {\r\n    return (control: AbstractControl) => {\r\n      // return null means validation passed, isMatching: true means we have validation error of type isMatching\r\n      return control?.value === control?.parent?.controls[matchTo].value ? null : {isMatching: true}\r\n    }\r\n  }\r\n\r\n  register() {\r\n    // our register is a Form\r\n    //this.accountService.register(this.model).subscribe(response => { // old way\r\n    this.accountService.register(this.registerForm.value).subscribe(response => {\r\n\r\n      // take us straight to the members page\r\n      this.router.navigateByUrl('/members');\r\n    }, error => {\r\n      this.validationErrors = error;\r\n      // this.toastr.error(error.error); // we dont need this because bad request will come back from interceptor\r\n    })\r\n  }\r\n\r\n  cancel() {\r\n    // what we want to emit when the cancel button is pressed\r\n    this.cancelRegister.emit(false);\r\n  }\r\n\r\n}\r\n","<!-- to change template form to reactive, Instead of using a template variable of :\r\n   <form #registerForm='ngForm' (ngSubmit)=\"register()\" autocomplete=\"off\">\r\n  we will use an input property of [formGroup]. Check registerForm.valid on ngSubmit\r\n  to disable pressing Enter to submit an invalid form  -->\r\n<form [formGroup]=\"registerForm\" (ngSubmit)=\"registerForm.valid && register()\" autocomplete=\"off\">\r\n  <h2 class=\"text-center text-primary\">Sign up</h2>\r\n  <hr>\r\n\r\n  <!-- replace all this html code with text-inputs\r\n  <div class=\"d-flex\">\r\n    <!-input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"model.username\" placeholder=\"Username\"->\r\n    <!- class.is-invalid will be applied if the expresion that follows resolves to TRUE->\r\n    <input \r\n      [class.is-invalid]='registerForm.get(\"username\").errors &&  registerForm.get(\"username\").touched'\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n      formControlName='username'\r\n      placeholder=\"Username\">\r\n    <!- username only has 1 validator so the feedback is simple->\r\n    <div class=\"invalid-feedback\">Please enter a username</div>\r\n  </div>\r\n\r\n  <div class=\"d-flex\">\r\n    <!-input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"model.password\" placeholder=\"Password\"->\r\n    <input \r\n      [class.is-invalid]='registerForm.get(\"password\").errors &&  registerForm.get(\"password\").touched'\r\n      type=\"password\" \r\n      class=\"form-control\" \r\n      formControlName=\"password\" \r\n      placeholder=\"Password\">\r\n    <!- Use ngIf to handle mutliple validation types on this field ->\r\n    <div *ngIf=\"registerForm.get('password').hasError('required')\" class=\"invalid-feedback\">Please enter a password</div>\r\n    <div *ngIf=\"registerForm.get('password').hasError('minlength')\" class=\"invalid-feedback\">The password must be at least 4 characters</div>\r\n    <div *ngIf=\"registerForm.get('password').hasError('maxlength')\" class=\"invalid-feedback\">The password must be at most 8 characters</div>\r\n  </div>\r\n\r\n  <div class=\"d-flex\">\r\n    <input \r\n      [class.is-invalid]='registerForm.get(\"confirmPassword\").errors &&  registerForm.get(\"confirmPassword\").touched'\r\n      type=\"password\" \r\n      class=\"form-control\" \r\n      formControlName=\"confirmPassword\" \r\n      placeholder=\"Confirm Password\">\r\n    <div *ngIf=\"registerForm.get('confirmPassword').hasError('required')\" class=\"invalid-feedback\">Please confirm password</div>\r\n    <div *ngIf=\"registerForm.get('confirmPassword').hasError('isMatching')\" class=\"invalid-feedback\">The passwords must match</div>\r\n  </div> -->\r\n\r\n  <!-- this code below replaces all the code above and uses a resuable form input -->\r\n  <!-- the form fields correspond with those defined in register.component.ts -->\r\n  <div class=\"mb-3\">\r\n    <label class=\"control-label\" style=\"margin-right: 10px;\">I am a: </label>\r\n    <label class=\"form-check-label\">\r\n      <input class=\"form-check-input ms-3\" type=\"radio\" value=\"female\" formControlName=\"gender\"> Female\r\n    </label>\r\n    <label class=\"form-check-label\">\r\n      <input type=\"radio\" value=\"male\" formControlName=\"gender\" class=\"form-check-input ms-3\"> Male\r\n    </label>\r\n    <label class=\"form-check-label\">\r\n      <input type=\"radio\" value=\"nonbinary\" formControlName=\"gender\" class=\"form-check-input ms-3\"> Non Binary\r\n    </label>\r\n  </div>\r\n  <app-text-input [formControl]=\"$any(registerForm.controls['username'])\" [label]=\"'Username'\" ></app-text-input>\r\n  <app-text-input [formControl]=\"$any(registerForm.controls['knownAs'])\" [label]=\"'Known As'\" ></app-text-input>\r\n  <app-date-picker [formControl]=\"$any(registerForm.controls['dateOfBirth'])\" [label]=\"'Date Of Birth'\" [maxDate]=\"maxDate\"></app-date-picker>\r\n  <app-text-input [formControl]=\"$any(registerForm.controls['city'])\" [label]=\"'City'\" ></app-text-input>\r\n  <app-text-input [formControl]=\"$any(registerForm.controls['country'])\" [label]=\"'Country'\" ></app-text-input>\r\n  <app-text-input [formControl]=\"$any(registerForm.controls['password'])\" [label]=\"'Password'\" [type]=\"'password'\" ></app-text-input>\r\n  <app-text-input [formControl]=\"$any(registerForm.controls['confirmPassword'])\" [label]=\"'Confirm Password'\" [type]=\"'password'\" ></app-text-input>\r\n\r\n  <div class=\"row\" *ngIf=\"validationErrors.length > 0\">\r\n    <ul class=\"text-danger\">\r\n        <li *ngFor=\"let error of validationErrors\">\r\n            {{error}}\r\n        </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <div class=\"text-center\">\r\n      <!-- [disabled]='!registerForm.valid' disabled the submit button until valid --> \r\n      <button [disabled]='!registerForm.valid' class=\"btn btn-success me-2\" type=\"submit\">Register</button>\r\n      <button class=\"btn btn-default me-2\" (click)=\"cancel()\" type=\"button\">Cancel</button>\r\n  </div>\r\n</form>\r\n\r\n<!-- debug info displayed to browser\r\n<p>Form value: {{registerForm.value | json}}</p>\r\n<p>Form status: {{registerForm.status | json}}</p>\r\n-->","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  //production: false,\r\n  //apiUrl: 'https://localhost:5001/api/',\r\n  //hubUrl: 'https://localhost:5001/hubs/'\r\n  production: true,\r\n  apiUrl: 'api/',\r\n  hubUrl: 'hubs/'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}